#+Title: Computer Science 3MI3 – 2020 homework 8
#+Subtitle: Visualising the call stack in Clojure
#+Author: Mark Armstrong
#+Date: November 19th, 2020
#+Description: Understanding tail recursion by defining recursive functions
#+Description: in Clojure which print a representation of the call stack.
#+Options: num:nil
#+SETUPFILE: ../org-html-themes/setup/theme-readtheorg-local.setup

* Introduction
:PROPERTIES:
:CUSTOM_ID: Introduction
:END:

In this homework, we provide you with a new Clojure special form
which can be used to create functions
which automatically output a visualisation of their calling context,
and hence their stack usage, as they run.
You are tasked with using this new special form to implement
several simple recursive functions both in a “naive” way
and a tail recursive way.

See [[Part 0.1: “Naive” recursion vs. tail recursion][Part 0.1]] for an overview of “naive” and tail recursion.

* Boilerplate
:PROPERTIES:
:CUSTOM_ID: Boilerplate
:END:

** Submission procedures
:PROPERTIES:
:CUSTOM_ID: Submission-procedures
:END:

#+INCLUDE: "./../boilerplate.org::*Homework submission" :only-contents t

** Proper conduct for coursework
:PROPERTIES:
:CUSTOM_ID: Proper-conduct-for-coursework
:END:

#+INCLUDE: "./../boilerplate.org::*Homework conduct" :only-contents t

* Part 0.1: “Naive” recursion vs. tail recursion
:PROPERTIES:
:CUSTOM_ID: Part-0.1:-“Naive”-recursion-vs. tail-recursion
:END:

As discussed during the week 9 tutorials,
in general, we know that recursion is less efficient than
iteration (looping) as a control structure
due to the requirement of a /stack frame/ for each recursive call.

For instance, consider this “naively” defined factorial function.
#+begin_src clojure :session
(defn factorial [n]
  (cond
    (= n 0) 1
    (> n 0) (* n (factorial (- n 1)))
    :else (throw (Exception. "Trying to calculate factorial of a negative number."))))
#+end_src

#+RESULTS:
: #'user/factorial

If we “unwind the recursion” for a call to the above function,
we see that at each recursive step, there is more and more
“work to be done” added outside the recursive call.
When we do reach a base case, we then have to return back to each call,
doing the remaining work along the way.
#+begin_src text
(factorial 3)
(* 3 (factorial 2))
(* 3 (* 2 (factorial 1)))
(* 3 (* 2 (* 1 (factorial 0))))
(* 3 (* 2 (* 1 1)))
(* 3 (* 2 1))
(* 3 2)
6
#+end_src
This work to be done has to be remembered somehow,
and in principle this means that the stack frame for each call must
be maintained until that call returns.

In contrast to the “naive” approach above, a /tail recursive/ definition
can be constructed so that /no work/ remains to be done
upon returning from the recursive call.
Because of this fact, if the language implementation chooses to do so,
the stack frames can be reused, and we can return to the initial caller
when we reach the base case, instead of returning back through each
recursive caller.
#+begin_src clojure :session
(defn factorial-tr [n]
  (defn fact-iter [n collect]
    (cond
      (= n 0) collect
      (> n 0) (fact-iter (- n 1) (* collect n))
      :else (throw (Exception. "Trying to calculate factorial of a negative number."))))
  (fact-iter n 1))
#+end_src

#+RESULTS:
: #'user/factorial-tr

If we visualise a call to this function, we can observe
that the calling context is constant (rather than growing in size),
implying that the memory requirements on the stack are also constant.
#+begin_src text
(factorial-tr 3)
(fact-iter 3 1)
(fact-iter 2 3)
(fact-iter 1 6)
(fact-iter 0 6)
6
#+end_src

Tail recursion is then more efficient than general recursion,
and is in fact equivalent to looping or iterating constructs.
The ideas behind an iterative implementation  and
a tail recursive implementation are also usually quite similar.

In this homework, we provide you with a new Clojure special form
which can be used to create functions
which automatically output a visualisation of their calling context,
and hence their stack usage, as they run.
You are tasked with using this new special form to implement
several simple recursive functions both in a “naive” way
and a tail recursive way.

* Part 0.2: A new special form to automate visualisation of the stack
:PROPERTIES:
:CUSTOM_ID: Part-0.2:-A-new-special-form-to-automate-visualisation-of-the-stack
:END:

In this section, we define the new special form
used in this assignment, called “~unwindrec~”.

#+begin_center
*You may read about its definition if you are interested.*
*If you prefer though, skip to the next section,*
*[[Part 0.3: Using the new special form][Part 0.3: Using the new special form]]
*which shows you how to use ~unwindrec~.*

It's not required that you understand all the code in this section.
#+end_center

We need a way to replace a value in a string representation
of a Clojure term with a different value.
Specifically, this will be used to replace variable names with their values,
and to replace the placeholder ~rec~ with recursive calls
or the results of recursive calls.
#+begin_src clojure :tangle ./src/h8/unwindrec.clj
(defn replace-value-in-termstring
  "Replace all occurrences of `value` with `replacement`
within a `string` which is assumed to Clojure term.

Since the `string` is assumed to be a Clojure term,
this replaces the `value` only if it surrounded by spaces, parentheses,
braces or brackets (i.e., not if it is a substring of some subterm.)
One use of this is to replace a variable's name with its value,
as in `(replace-value-in-termstring 'var var string)`."
  [value replacement string]
  (clojure.string/replace
   string
   ;; The first group of this pattern matches the beginning of the string,
   ;; whitespace, or an opening parenthese/brace/bracket.
   ;; The last group matches the end of the string, whitespace, or
   ;; a closing parenthese/brace/bracket.
   (re-pattern (str "(\\A|\\s|\\[|\\{|\\()(" value ")(\\)|\\}|\\]|\\s|\\z)"))
   (str "$1" replacement "$3")))
#+end_src

#+RESULTS:
: #'user/replace-value-in-termstring

We actually need a version of the above which replaces multiple values.
#+begin_src clojure :tangle ./src/h8/unwindrec.clj
(defn replace-values-in-termstring
  "Replace all occurrences of the eleents of `values`
with the corresponding elements of `replacements`
within a `string` which is assumed to Clojure term.

This is the multiple replacement version of `replace-value-in-termstring`.
Note that values are replaced from in order,
and if an earlier replacement adds to the termstring
a value later in the list that value will also be replaced
(but not vice versa.)

Since the `string` is assumed to be a Clojure term,
this replaces the `value` only if it surrounded by spaces, parentheses,
braces or brackets (i.e., not if it is a substring of some subterm.)
One use of this is to replace a variable's name with its value,
as in `(replace-value-in-termstring 'var var string)`."
  [values replacements string]
  ;; `values` and `replacements` are assumed to be the same length,
  ;; but we check both are non-empty.
  (if (and (seq values) (seq replacements))
    ;; Deconstruct the lists.
    (let [[v & vs] values
          [r & rs] replacements]
      (replace-values-in-termstring vs rs
                                    (replace-value-in-termstring v r string)))
    ;; If `values` or `replacements` is empty, just return the string.
    string))
#+end_src

#+RESULTS:
: #'user/replace-values-in-termstring

We'll need to use the above for each element of the ~args~ list,
replacing each element with its current value,
and also replacing instances of the function name
(with ~f~ and the ~context~ argument.)

We'll also need to replace the recursive call(s) with
a placeholder before we pass it along to the recursive call,
so that the recursive call can tell where it was called from
in the string.

This method to find the first closing parenthese that is not matched
in a string will be necessary to tell where to replace up to.
I don't see a way that regular expressions could be used for this,
as there's no good way to specify “match up to
a closing parenthese /that does not have an opening parenthese match/”.
This function instead uses a helper which keeps track of the number
of unmatched opening parentheses as we walk through the string.
#+begin_src clojure :tangle ./src/h8/unwindrec.clj
(defn closing-paren-in-string
  "Given a string `s`, return an two element list consisting of
the portion of `s` up to (and including) the first closing parenthese
that does not have a matching opening parenthese, and the remainder of `s`."
  [s]
  (letfn [(nth-closing-paren-in-string [s openings]
            (cond
              ;; If `s` has less than 2 characters, then even if it is a closing paren,
              ;; it's the first one and belongs in the first list.
              (> 2 (count s)) `(~(apply str s) "")
              :else
              ;; Otherwise, decompose `s` to check its first character.
              (let [[c & cs] s]
                (cond
                  ;; If it's an opening paren, increment `openings` in the recursive call
                  ;; and prepend `c` to the returned first string.
                  (= c \() (let [[before after] (nth-closing-paren-in-string cs (+ openings 1))]
                              `(~(str c before) ~(apply str after)))
                  ;; If it's a closing paren, either split the string here if `openngs` is 0,
                  ;; or decrement `openings` in the recursive call. And prepend `c` to the first string.
                  (= c \)) (if (= openings 0)
                             `(~(str c) ~(apply str cs))
                             (let [[before after] (nth-closing-paren-in-string cs (- openings 1))]
                                `(~(str c before) ~after)))
                  ;; Otherwise, just make the recursive call and prepend `c` to the returned first string.
                  :else     (let [[before after] (nth-closing-paren-in-string cs openings)]
                              `(~(str c before) ~after))))))]
    ;; Start out with 0 opening parentheses seen.
    (nth-closing-paren-in-string s 0)))
#+end_src

#+RESULTS:
: #'user/closing-paren-in-string

Now, we can replace all instances of a call to a function
by splitting the string at that function name,
then further splitting the second part at
the first unmatched closing parenthese,
and replacing the chunk for the function call with a placeholder.
#+begin_src clojure :tangle ./src/h8/unwindrec.clj
(defn replace-call-in-termstring
  "Replace all calls to a function whose name is given by `f`
in a string representing "
  [f replacement string]
   ;; Find the first occurrence of `f` preceded by an opening parenthese.
   (let [m (re-find (re-pattern (str "(.*)\\((" f "\\s.*)")) string)]
     ;; The match m will be nil if no match was found. Otherwise,
     ;; because the pattern has two groups, it will be a vector
     ;; of the whole match, the portion before the `f` call,
     ;; and the `f` call and remainder of the string.
     ;; Note the opening parenthese is not in either group.
     (if m
       ;; Get the parts of m.
       (let [[whole before call-and-after] m
             ;; Separate `call-and-after` at the first unmatched closing parenthese.
             [callbody after] (closing-paren-in-string call-and-after)]
         (str before replacement after))
       ;; If m is null, just return the string as is.
       string)))
#+end_src

#+RESULTS:
: #'user/replace-call-in-termstring

Now we are finally ready to define our new special form.
It constructs a recursive function of the same form
we used for ~factorial~ and ~factorial-tr~,
carrying out the work of manipulating the “context string”
automatically.
#+begin_src clojure :tangle ./src/h8/unwindrec.clj
(defmacro unwindrec
  "Define a simple recursive function which prints out the
unwinding of the recursion as it runs.

The name of the function is given by `name`, and its arguments by `args`.

It is assumed that the function has a single base case,
guarded by condition `basecond` and with body `basebody`.
`basebody` should not contain any recursive calls;
the printing will not work properly otherwise.

It is further assumed that the function has a single recursive case,
guarded by condition `reccond` and with body `recbody`.
`recbody` should contain exactly one recursive call to `name`
somewhere in its body. The printing may not work properly otherwise.

The final, optional, argument `elsebody` is used as the body
if neither the `basecond` or `reccond` is satisfied.
"
  ([name args basecond basebody reccond recbody]
   ;; If `elsebody` is not provided, substitute `nil` instead.
   `(unwindrec ~name ~args ~basecond ~basebody ~reccond ~recbody nil))
  ([name args basecond basebody reccond recbody elsebody]
   ;; Define the function `name` taking arguments `args`.
   `(defn ~name ~args
      ;; This local function `f` actually implements `name`.
      ;; It has an additional argument, a string giving the context of
      ;; the call. This string should contain a substring "rec"
      ;; which is the point in the context at which the call was made.
      (letfn
          [(~'f [~'context ~@args]
            ;; Use the provided base case and recursive case conditions.
            (cond
              ;; In the base case, evaluate `basebody`. Substitute that value
              ;; for "rec" in the `context` and print the context,
              ;; then return the value.
              ~basecond (let [~'value ~basebody]
                          (println (replace-value-in-termstring
                                    '~'rec
                                    ~'value
                                    ~'context))
                          ~'value)
              ;; In the recursive case, replace "rec" in the `context`
              ;; with the recursive case body, and replace all argument names
              ;; with their current values.
              ~reccond  (let [~'this-context-with-call (replace-values-in-termstring
                                                        '~args
                                                        (map str ~args)
                                                        (replace-value-in-termstring
                                                         '~'rec
                                                         (str '~recbody)
                                                         ~'context))
                              ;; Also construct a new context `this-context-with-rec` to be
                              ;; passed in the recursive call by replacing
                              ;; the recursive call in `this-context-with-call` with "rec".
                              ~'this-context-with-rec (replace-call-in-termstring
                                                       '~name
                                                       "rec"
                                                       ~'this-context-with-call)]
                          (println ~'this-context-with-call)
                          ;; Now, actually make the recursive call, but first
                          ;; walk the `recbody` to replace `name` with `f` and
                          ;; the additional argument `this-context-with-rec`
                          ;; (remember that `f` is implementing `name`.)
                          (let [~'result ~(clojure.walk/prewalk-replace {name '(partial f this-context-with-rec)} recbody)
                                ~'this-context-with-result (replace-value-in-termstring '~'rec (str ~'result) ~'context)]
                            ;; Print out the context again with the result in place, unless
                            ;; the whole context is just the result (this is so
                            ;; just the result does not get printed over and over.)
                            (when (not= ~'this-context-with-result (str ~'result))
                              (println ~'this-context-with-result))
                            ~'result))
              ;; If neither `basecond` nor `reccond` was satisfied,
              ;; evaluate `elsebody`. This does no printing.
              :else ~elsebody))]

        ;; Before calling `f`, print out the originating call.
        (println (replace-values-in-termstring
                  '~args
                  (map str ~args)
                  (str "(" (clojure.string/join " " '(~name ~@args)) ")")))
        ;; Then call `f`.
        (~'f "rec" ~@args)))))
#+end_src

#+RESULTS:
: #'user/unwindrec

* Part 0.3: Using the new special form
:PROPERTIES:
:CUSTOM_ID: Part-0.3:-Using-the-new-special-form
:END:

Here, we show how to use this new special form
to define simple recursive functions such as factorial.

First, the “naive” recursive factorial.
#+begin_src clojure
(unwindrec factorial [n]
            (= n 0) 1
            (> n 0) (* n (factorial (- n 1)))
            (throw (Exception. "Trying to calculate factorial of a negative number.")))
#+end_src

#+RESULTS:
: #'user/factorial

And then the tail recursive variant. Note that we must again
wrap the helper function which takes two arguments in another ~defn~ that
defines the function taking one argument.
(In this case, the ~factorial-tr-helper~ function will be defined globally,
because ~unwindrec~ expands to a ~defn~ instead of a ~letfn~, but that's okay.)
#+begin_src clojure
(defn factorial-tr [n]
  (unwindrec factorial-tr-helper [n collect]
             (= n 0) collect
             (> n 0) (factorial-tr-helper (- n 1) (* collect n))
             (throw (Exception. "Trying to calculate factorial of a negative number.")))
  (factorial-tr-helper n 1))
#+end_src

* Part 1: Exponent              [10 marks]
:PROPERTIES:
:CUSTOM_ID: Part-1:-Exponent--------------[10 marks]
:END:

Similar to the ~factorial~ and ~factorial-tr~ functions defined
using the ~unwindrec~ form in [[Part 0.3: Using the new special form][Part 0.3]],
define two functions ~exponent~ and ~exponent-tr~ which
implement the exponent/power function on natural numbers
(meaning that negative exponents are not supported.)

The full definitions of ~unwindrec~ and the helper functions it uses
can be found [[./src/h8/unwindrec.clj][here]]. You may either copy the contents of this file into yours,
or import it, for instance by placing it in the same directory
as your ~h8.clj~ and writing ~(load-file "./unwindrec.clj")~ at the top of your file.

The ~exponent~ function should use “naive” recursion on the second argument,
whereas ~exponent-tr~ should use tail recursion (still on the second argument.)

For instance, ~(exponent 2 3)~ should return ~8~, since $2^{3} = 8$.

* Part 2: Sum of a list         [10 marks]
:PROPERTIES:
:CUSTOM_ID: Part-2:-Sum-of-a-list---------[10 marks]
:END:

Now, use the ~unwindrec~ form to define functions ~sumlist~ and ~sumlist-tr~ which
sum up the elements of a list.

For instance, ~(sumlist '(0 1 2 3))~ should return ~6~.

* Part 3: Flatten a list        [20 marks]
:PROPERTIES:
:CUSTOM_ID: Part-3:-Flatten-a-list--------[20 marks]
:END:

Use ~unwindrec~ again more to define functions ~flattenlist~ and ~flattenlist-tr~ which
flatten a list of lists to a list, by concatenating the lists.

For instance, ~(flattenlist '((1 2) (3 4) (5 6 7 8)))~ should return ~(1 2 3 4 5 6 7 8)~.

* Part 4: Postfixes of a list   [20 marks]
:PROPERTIES:
:CUSTOM_ID: Part-4:-Prefixes-of-a-list----[20 marks]
:END:

Use ~unwindrec~ once more to define functions ~postfixes~ and ~postfixes-tr~ which,
given a list ~l~, return all the sublists which are postfixes of ~l~,
including ~l~ itself and the empty list, in decreasing order of length.

For instance, ~(postfixes '(1 2 3 4 5 6))~ should
return ~((1 2 3 4 5 6) (2 3 4 5 6) (3 4 5 6) (4 5 6) (5 6) (6) ())~.

*Make sure that the empty list is considered a postfix*.

Note that you may need to write the list containing the empty list
as part of your code; this can be written ~'(())~.

You may also need to write the list containing the value of a variable,
say for instance a variable ~x~. You will find that
if you write ~'(x)~, ~x~ is not evaluated and so is not replaced by its value.
Instead, you must write something like ~`(~x)~. The backtick ~`~ is a special
kind of quote that allows for parts of the quoted expression,
marked with tildes ~~~, to be evaluated.

* Testing
:PROPERTIES:
:CUSTOM_ID: Testing
:END:

Unit tests for the requested methods/functions
are available here [[./testing/h8/h8t.clj][h8t.clj]].
The contents of the unit test file are also repeated below.

#+begin_center
These tests confirm that your functions return the correct values.
However, they do not confirm that you have used the ~unwindrec~ form,
or that your naive and tail recursive definitions are indeed
naive and tail recursive respectively.
#+end_center

** Automated testing via Docker
:PROPERTIES:
:CUSTOM_ID: Automated-testing-via-Docker
:END:

The Docker setup and usage scripts are available at the following links.
Their contents are also repeated below.
- [[./testing/h8/Dockerfile][Dockerfile]]
- [[./testing/h8/docker-compose.yml][docker-compose.yml]]
- [[./testing/h8/setup.sh][setup.sh]]
- [[./testing/h8/run.sh][run.sh]]
Place them into your ~h8~ directory where your ~h8.clj~ file
and the ~h8t.clj~ (linked to above) files exist,
then run ~setup.sh~ and ~run.sh~.

You may also refer to the README
for this testing setup and those files
[[https://github.com/armkeh/principles-of-programming-languages/tree/master/homework/testing/h5][on the course GitHub repo]].

Note that the use of the ~setup.sh~ and ~run.sh~ scripts assumes
that you are in a ~bash~ like shell; if you are on Windows,
and not using WSL or WSL2, you may have
to run the commands contained in those scripts manually.

** The tests
:PROPERTIES:
:CUSTOM_ID: The-tests
:END:

The contents of the testing script are repeated here.

[[./testing/h8/h8t.sc][h8t.sc]]
#+begin_src clojure :tangle ./testing/h8/h8t.clj
(ns testing)
(use 'clojure.test)
(load-file "h8.clj")

(deftest naive-exponent
  (is (= (exponent 1 10)  1))
  (is (= (exponent 2  5) 32))
  (is (= (exponent 5  2) 25)))

(deftest tailrec-exponent
  (is (= (exponent-tr 1 10)  1))
  (is (= (exponent-tr 2  5) 32))
  (is (= (exponent-tr 5  2) 25)))

(deftest naive-sumlist
  (is (= (sumlist '(0 1 2 3)) 6))
  (is (= (sumlist '(0 0 0 0)) 0))
  (is (= (sumlist '(10 -1 -1 -1 -1 -1)) 5)))

(deftest tailrec-sumlist
  (is (= (sumlist-tr '(0 1 2 3)) 6))
  (is (= (sumlist-tr '(0 0 0 0)) 0))
  (is (= (sumlist-tr '(10 -1 -1 -1 -1 -1)) 5)))

(deftest naive-flattenlist
  (is (= (flattenlist '((1 2) (3 4) (5 6) (7 8))) '(1 2 3 4 5 6 7 8)))
  (is (= (flattenlist '((0))) '(0)))
  (is (= (flattenlist '((1) ((2) (3)))) '(1 (2) (3)))))

(deftest tailrec-flattenlist
  (is (= (flattenlist-tr '((1 2) (3 4) (5 6) (7 8))) '(1 2 3 4 5 6 7 8)))
  (is (= (flattenlist-tr '((0))) '(0)))
  (is (= (flattenlist-tr '((1) ((2) (3)))) '(1 (2) (3)))))

(deftest naive-postfixes
  (is (= (postfixes '(1 2 3 4 5 6)) '((1 2 3 4 5 6) (2 3 4 5 6) (3 4 5 6) (4 5 6) (5 6) (6) ())))
  (is (= (postfixes '(0)) '((0) ())))
  (is (= (postfixes '(6 5 4 3 2 1)) '((6 5 4 3 2 1) (5 4 3 2 1) (4 3 2 1) (3 2 1) (2 1) (1) ()))))

(deftest tailrec-postfixes
  (is (= (postfixes-tr '(1 2 3 4 5 6)) '((1 2 3 4 5 6) (2 3 4 5 6) (3 4 5 6) (4 5 6) (5 6) (6) ())))
  (is (= (postfixes-tr '(0)) '((0) ())))
  (is (= (postfixes-tr '(6 5 4 3 2 1)) '((6 5 4 3 2 1) (5 4 3 2 1) (4 3 2 1) (3 2 1) (2 1) (1) ()))))

;; If we define `test-ns-hook`, it is called when running `run-tests`,
;; instead of just calling all tests in the namespace.
;; This lets us control the order of the tests.
(deftest test-ns-hook
  (naive-exponent)
  (naive-sumlist)
  (naive-flattenlist)
  (naive-postfixes)
  (tailrec-exponent)
  (tailrec-sumlist)
  (tailrec-flattenlist)
  (tailrec-postfixes))

(run-tests 'testing)
#+end_src

** The Docker setup
:PROPERTIES:
:CUSTOM_ID: The-Docker-setup
:END:

The contents of the Docker setup files and scripts are repeated here.

[[./testing/h7/Dockerfile][Dockerfile]]
#+begin_src docker :tangle ./testing/h8/Dockerfile
# Define the argument for openjdk version
ARG OPENJDK_TAG=8u232

FROM clojure:openjdk-8
    
# Set the name of the maintainers
MAINTAINER Habib Ghaffari Hadigheh, Mark Armstrong <ghaffh1@mcmaster.ca, armstmp@mcmaster.ca>

# Set the working directory
WORKDIR /opt/h8
#+end_src

[[./testing/h7/docker-compose.yml][docker-compose.yml]]
#+begin_src yaml :tangle ./testing/h8/docker-compose.yml
version: '2'
services:
  service:
    build: .
    image: 3mi3_h8_docker_image
    volumes:
      - .:/opt/h8
    container_name: 3mi3_h8_container
    command: bash -c
      "cat h8t.clj | lein repl"
#+end_src

[[./testing/h5/setup.sh][setup.sh]]
#+begin_src shell :tangle ./testing/h8/setup.sh :shebang t
docker-compose build --force-rm
#+end_src

[[./testing/h5/run.sh][run.sh]]
#+begin_src shell :tangle ./testing/h8/run.sh :shebang t
# Run the container
docker-compose up --force-recreate
# Stop the container after finishing the test run
docker-compose stop -t 1
#+end_src

[[./testing/h5/README.md][README.md]]
#+begin_src text :tangle ./testing/h8/README.md
# Instructions for automated testing using Docker

We have already created a `Dockerfile` here which specifies
all the necessary packages, etc., for compiling and running your code.
You only need to follow the instructions below to see 
the results of unit tests designed to check your implementation.

## Setup
We use `docker-compose` and its configuration file to build the image.
Assuming you have `docker` and `docker-compose` installed,
simply execute
```shell script
./setup.sh
```
to generate the image.

## Prepare your code for the running the tests
You only need to place the `h8t.clj` unit test file and
the `run.sh` file in the same directory as your `h8.clj` source file.

## Running the tests
As with the build process, we have already put
the configuration needed for running the test inside `docker-compose.yml`.
Simply execute
```shell script
./run.sh
```
to run and see the results of the tests.
#+end_src
