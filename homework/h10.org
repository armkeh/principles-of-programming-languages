#+Title: Computer Science 3MI3 – 2020 homework 10
#+Subtitle: Using concurrency to break up large problems
#+Author: Mark Armstrong
#+Date: December 4, 2020
#+Description: Making use of concurrency approaches in all of our languages.
#+Options: num:nil
#+SETUPFILE: ../org-html-themes/setup/theme-readtheorg-local.setup

* Introduction
:PROPERTIES:
:CUSTOM_ID: Introduction
:END:

This homework presents a somewhat contrived problem
involving a computation over a slightly large dataset
in order to justify the use of concurrency.

This problem is based on the one presented on
[[https://adventofcode.com/2020/day/1][day 1]] of
the [[https://adventofcode.com/][Advent of Code]] programming challenge
for 2020.

The homework provides a solution to the problem in Clojure, Ruby
and Scala, and asks you to modify the solutions
to take advantage of concurency.

* Boilerplate
:PROPERTIES:
:CUSTOM_ID: Boilerplate
:END:

** Submission procedures
:PROPERTIES:
:CUSTOM_ID: Submission-procedures
:END:

#+INCLUDE: "./../boilerplate.org::*Homework submission" :only-contents t

** Proper conduct for coursework
:PROPERTIES:
:CUSTOM_ID: Proper-conduct-for-coursework
:END:

#+INCLUDE: "./../boilerplate.org::*Homework conduct" :only-contents t

* Part 0: The problem
:PROPERTIES:
:CUSTOM_ID: Part-0:-The-problem
:END:

You are provided with a collection of integers for this homework.
What we want to compute on this collection is:
Given an integer ~sum~, find all possible pairs
of (two of) those integers whose sum is less than or equal to ~sum~,
and return a sequence of those pairs.

(The pairing of one of the integers with itself is
assumed not to count, unless that integer
appears twice in the provided collection.)

Code is provided which solves this problem in Clojure,
Ruby and Scala. Your task is then to improve the performance
of this code using concurrency.

Note that we will not test for the exact ordering of the sequence,
and it is not required to be in a specific order.
We will instead test for membership within the list.

The collection is available [[./src/h10/collection.txt][here]] in plaintext,
and below as a defined sequence in each language.

** COMMENT The collection generator
:PROPERTIES:
:CUSTOM_ID: COMMENT-The-collection-generator
:END:

#+begin_src amm
import scala.util.Random
import java.io.PrintWriter

val seed = new Random()
val plaintext_writer = new PrintWriter("./collection.txt")
val clojure_writer = new PrintWriter("./collection.clj")
val ruby_writer = new PrintWriter("./collection.rb")
val scala_writer = new PrintWriter("./collection.sc")

clojure_writer.write("(defn input '(")
ruby_writer.write("input = [")
scala_writer.write("val input = List(")

1 to 100000 foreach { _ =>
  val next_number = seed.between(0,1000001)
  plaintext_writer.write(s"${next_number}\n")
  clojure_writer.write(s"${next_number}\n")
  ruby_writer.write(s"${next_number},\n")
  scala_writer.write(s"${next_number},\n")
}

clojure_writer.write("))")
ruby_writer.write("]")
scala_writer.write(")")

#+end_src

* Part 1: Clojure [15 points]
:PROPERTIES:
:CUSTOM_ID: Part-1:-Clojure-[15 points]
:END:

The given collection is available in the file [[./src/h10/collection.clj][collection.clj]],
which defines it as a Clojure array ~input~.

Below, you will see the function ~summingPairs~ implemented in Clojure
to solve our given problem.

Implement a version of ~summingPairs~ which takes advantage of
the ~future~ form to run parts of the computation in separate threads.
You may choose how many threads to make use of.
Try to improve the performance of ~summingPairs~ through this process.

Here is the function:
#+begin_src clojure :tangle src/h10/h10.clj
(defn summingPairs [xs sum]
  (letfn [(summingPairsHelper [xs the_pairs]
            ;; If `xs` is empty, we're done.
            (if (empty? xs) the_pairs
                ;; Otherwise, decompose `xs` into the `fst` element
                ;; and the `rest`.
                (let [[fst & rest] xs]
                  ;; We use the `recur` form to make the recursive call.
                  ;; This ensures tail call optimisation
                  (recur
                   rest
                   ;; Concatenate `the_pairs` we have so far with the sequence
                   ;; of every `[fst snd]` where `snd` is in `rest` with
                   ;; `fst + snd <= sum`. The `doall` outside the `concat`
                   ;; forces it to be calculated immediately; without this,
                   ;; we get a (lazy) buildup of `concat`'s which may
                   ;; cause a stack overflow when looking at the result.
                   (doall 
                    (concat the_pairs
                            (for [snd rest ;; For each `snd` in `rest`...
                                  :when (<= (+ fst snd) sum)]
                              ;;... put `[fst snd]` into this sequence.
                              [fst snd])))))))]
    (summingPairsHelper xs [])))
#+end_src

It can be run over the ~input~ using the following code,
which also shows the starting and ending time of the computation,
so you may judge its performance.
#+begin_src clojure :tangle src/h10/h10.clj
(load-file "./collection.clj")

(println (str
          "Starting at:   "
          (.getSecond (java.time.LocalDateTime/now))
          " seconds, "
          (.getNano (java.time.LocalDateTime/now))
          " nanoseconds"))
(println (summingPairs input 2020))
(println (str
          "Ending at:     "
          (.getSecond (java.time.LocalDateTime/now))
          " seconds, "
          (.getNano (java.time.LocalDateTime/now))
          " nanoseconds"))
#+end_src

* Part 2: Ruby    [15 points]
:PROPERTIES:
:CUSTOM_ID: Part-2:-Ruby----[15 points]
:END:

Repeat part 1 in Ruby, potentially using the below method ~summingPairs~ as
a starting point.

The ~input~ collection is defined as a Ruby array
in the file [[./src/h10/collection.rb][collection.rb]].

The method:
#+begin_src ruby :results output :tangle src/h10/h10.rb
Pair = Struct.new(:fst,:snd)

def summingPairs(xs, sum)
  the_pairs = []
  len = xs.length

  for i in 0..(len-1)
    for j in (i+1)..(len-1)
      if xs[i] + xs[j] <= sum
        the_pairs.push(Pair.new(xs[i],xs[j]))
      end
    end
  end

  return the_pairs
end
#+end_src

And code to make use of it on the ~input~ array:
#+begin_src ruby :results output :tangle src/h10/h10.rb
require 'date'
require_relative 'collection'

puts "Starting at:   #{DateTime.now.sec} seconds, #{DateTime.now.strftime("%9N")} nanoseconds"
puts summingPairs(INPUT,2020)
puts "Ending at:     #{DateTime.now.sec} seconds, #{DateTime.now.strftime("%9N")} nanoseconds"
#+end_src

* Part 3: Scala   [15 points]
:PROPERTIES:
:CUSTOM_ID: Part-3:-Scala---[15 points]
:END:

Once more, repeat parts 1 and 2, this time in Scala.
You may make use of the below method ~summingPairs~ if you like.

This time, the ~input~ collection is defined as a Scala array
in [[./src/h10/collection.sc][collection.sc]]. Note this is an array, not a list as we have
usually made use of in Scala.
The size of the collection necessitated avoiding the (linked) list type.

The method:
#+begin_src amm :tangle src/h10/h10.sc
def summingPairs(xs: Vector[Int], sum: Int): Vector[Tuple2[Int,Int]] = {
  def summingPairsHelper(xs: Vector[Int],
                         the_pairs: Vector[Tuple2[Int,Int]]): Vector[Tuple2[Int,Int]] =
    xs match {
      case fst +: rest =>
        // Search through `rest` for numbers `snd` such that `fst + snd` is the `sum`.
        val pairs_here = rest.collect({case snd if fst + snd <= sum => (fst,snd)})
        // Make the recursive call, adding in the pairs we just found.
        summingPairsHelper(rest, the_pairs ++ pairs_here)
      case _ => the_pairs // If there's no head element, the vector is empty.
    }
  
  summingPairsHelper(xs,Vector())
}
#+end_src

And code to make use of it on the ~input~ array:
#+begin_src amm :tangle src/h10/h10.sc
import java.time.LocalDateTime
import $file.collection, collection._

println(s"Starting at:   ${LocalDateTime.now.getSecond} seconds, ${LocalDateTime.now.getNano} nanoseconds")
println(summingPairs(input,2020))
println(s"Ending at:     ${LocalDateTime.now.getSecond} seconds, ${LocalDateTime.now.getNano} nanoseconds")
#+end_src

* Part 4: Prolog  [5 bonus points]
:PROPERTIES:
:CUSTOM_ID: Part-4:-Prolog--[5 bonus points]
:END:

For bonus marks, implement a ~summingPairs~ predicate in Prolog,
making use of the ~concurrent~ predicate.

* Testing
:PROPERTIES:
:CUSTOM_ID: Testing
:END:

Unit tests for the requested methods/functions
are available:
- [[./testing/h10/h10t.clj][h10t.clj]] for Clojure,
- [[./testing/h10/h10t.rb][h10t.rb]] for Ruby, and
- [[./testing/h10/h10t.sc][h10t.sc]] for Scala.
The contents of the unit test file are also repeated below.

** Automated testing via Docker
:PROPERTIES:
:CUSTOM_ID: Automated-testing-via-Docker
:END:

The Docker setup and usage scripts are available at the following links.
Their contents are also repeated below.
- [[./testing/h10/Dockerfile][Dockerfile]]
- [[./testing/h10/docker-compose.yml][docker-compose.yml]]
- [[./testing/h10/setup.sh][setup.sh]]
- [[./testing/h10/run.sh][run.sh]]
Place them into your ~h10~ directory where your ~h10.clj~ file
and the ~h10t.clj~ (linked to above) files exist,
then run ~setup.sh~ and ~run.sh~.

You may also refer to the README
for this testing setup and those files
[[https://github.com/armkeh/principles-of-programming-languages/tree/master/homework/testing/h10][on the course GitHub repo]].

Note that the use of the ~setup.sh~ and ~run.sh~ scripts assumes
that you are in a ~bash~ like shell; if you are on Windows,
and not using WSL or WSL2, you may have
to run the commands contained in those scripts manually.

** The tests
:PROPERTIES:
:CUSTOM_ID: The-tests
:END:

The contents of the testing scripts are repeated here.

[[./testing/h10/h10t.clj][h10t.clj]]
#+begin_src clojure :tangle testing/h10/h10t.clj
(ns testing)
(use 'clojure.test)
(load-file "collection.clj") ;; The `collection` file provided with the homework.
(load-file "h10.clj")

(deftest contains-checks
  (let [result (summingPairs input 2020)]
    (is (contains? (set result) [374 150]))
    (is (contains? (set result) [626 1030]))
    (is (contains? (set result) [150 1850]))))

;; If we define `test-ns-hook`, it is called when running `run-tests`,
;; instead of just calling all tests in the namespace.
;; This lets us control the order of the tests.
(deftest test-ns-hook
  (contains-checks))

(run-tests 'testing)
#+end_src

[[./testing/h10/h10t.rb][h10t.rb]]
#+begin_src ruby :tangle testing/h10/h10t.rb
require_relative "h10"
require "test/unit"

RESULT = summingPairs(INPUT,2020)

class SimpleTests < Test::Unit::TestCase
  def test_contains_checks
    assert_equal(true, RESULT.include?(Pair.new(374, 150)))
    assert_equal(true, RESULT.include?(Pair.new(626, 1030)))
    assert_equal(true, RESULT.include?(Pair.new(150, 1850)))
  end
end
#+end_src

[[./testing/h10/h10t.sc][h10t.sc]]
#+begin_src amm :tangle testing/h10/h10t.sc
import $file.h10, h10._
import $file.collection, collection._

/* Given an expected result and a computed result,
   check if they are equal in value.
   If so, return 0. Otherwise, inform the user, and return 1,
   so the number of failures can be counted. */
def test[A](given: A, expected: A, the_test: String) =
  if (!(given equals expected)) {
    println("+---------------------------------------------------")
    println("| " + the_test + " failed.")
    println("| Expected " + expected + ", got " + given + ".")
    println("+---------------------------------------------------")
    1
  } else {
    0
  }


val result = summingPairs(input,2020)

//  The tests are saved as tuples, the pieces of which will be passed
// to test.
val tests = List(
  (result.contains(Tuple2(374,150)), true, "374,150"),
  (result.contains(Tuple2(626,1030)), true, "626,1030"),
  (result.contains(Tuple2(150,1850)), true, "150,1850"))

// Apply test to each element of tests, and sum the return values.
// This is essentially a for loop.
val failed = tests.foldLeft(0) {
  (failures, next) => next match {
    // Deconstruct the tuple to get its parts
    case (given, expected, the_test) => failures + test(given, expected, the_test)
  }
}

println("+---------------------------------------------------")
println("| " + failed + " tests failed")
println("+---------------------------------------------------")
#+end_src

** The Docker setup
:PROPERTIES:
:CUSTOM_ID: The-Docker-setup
:END:

The contents of the Docker setup files and scripts are repeated here.

[[./testing/h10/Dockerfile][Dockerfile]]
#+begin_src docker :tangle ./testing/h10/Dockerfile
# Define the argument for openjdk version
ARG OPENJDK_TAG=8u232

FROM clojure:openjdk-8

# Setup to install Scala
RUN apt-get update && \
    apt-get install scala -y && \
    apt-get install -y curl && \
    sh -c '(echo "#!/usr/bin/env sh" && \
    curl -L https://github.com/lihaoyi/Ammonite/releases/download/2.1.1/2.12-2.1.1) > /usr/local/bin/amm && \
    chmod +x /usr/local/bin/amm'
RUN (rm -rf /root/.cache)

# Install Ruby
RUN apt-get update && apt-get install -y --no-install-recommends --no-install-suggests curl bzip2 build-essential libssl-dev libreadline-dev zlib1g-dev && \
    rm -rf /var/lib/apt/lists/* && \
    curl -L https://github.com/rbenv/ruby-build/archive/v20201118.tar.gz | tar -zxvf - -C /tmp/ && \
    cd /tmp/ruby-build-* && ./install.sh && cd / && \
    ruby-build -v 2.7.2 /usr/local && rm -rfv /tmp/ruby-build-*

# Set the name of the maintainers
MAINTAINER Habib Ghaffari Hadigheh, Mark Armstrong <ghaffh1@mcmaster.ca, armstmp@mcmaster.ca>

# Set the working directory
WORKDIR /opt/h10
#+end_src

[[./testing/h10/docker-compose.yml][docker-compose.yml]]
#+begin_src yaml :tangle ./testing/h10/docker-compose.yml
version: '2'
services:
  service:
    build: .
    image: 3mi3_h10_docker_image
    volumes:
      - .:/opt/h10
    container_name: 3mi3_h10_container
    command: bash -c
      "echo 'Scala testing' ;
       echo '----------------------------------------------------------------------' ;
       amm h10t.sc ;
       printf '\\n\\n\\n' ;
       echo 'Ruby testing' ;
       echo '----------------------------------------------------------------------' ;
       ruby h10t.rb ;
       echo '----------------------------------------------------------------------' ;
       printf '\\n\\n\\n' ;
       echo 'Clojure testing' ;
       echo '----------------------------------------------------------------------' ;
       cat h10t.clj | lein repl ;
       echo '----------------------------------------------------------------------'"
#+end_src

[[./testing/h10/setup.sh][setup.sh]]
#+begin_src shell :tangle ./testing/h10/setup.sh :shebang
docker-compose build --force-rm
#+end_src

[[./testing/h10/run.sh][run.sh]]
#+begin_src shell :tangle ./testing/h10/run.sh :shebang
# Run the container
docker-compose up --force-recreate
# Stop the container after finishing the test run
docker-compose stop -t 1
#+end_src

[[./testing/h10/README.md][README.md]]
#+begin_src text :tangle ./testing/h10/README.md
# Instructions for automated testing using Docker

We have already created a `Dockerfile` here which specifies
all the necessary packages, etc., for compiling and running your code.
You only need to follow the instructions below to see 
the results of unit tests designed to check your implementation.

## Setup
We use `docker-compose` and its configuration file to build the image.
Assuming you have `docker` and `docker-compose` installed,
simply execute
```shell script
./setup.sh
```
to generate the image.

## Prepare your code for the running the tests
You only need to place the `h8t.clj` unit test file and
the `run.sh` file in the same directory as your `h9.clj` source file.

## Running the tests
As with the build process, we have already put
the configuration needed for running the test inside `docker-compose.yml`.
Simply execute
```shell script
./run.sh
```
to run and see the results of the tests.
#+end_src
