#+Title: The Boom hierarchy in Scala
#+Author: Mark Armstrong
#+Description: A brief background on the Boom hierarchy family of datatypes,
#+Description: followed by a (in the end, flawed) implementation in Scala.
#+SETUPFILE: ../../org-html-themes/setup/theme-readtheorg-local.setup

* Setup                                         :noexport:

** Image creation post-processing

We need to prepend the images resulting from ~dot~ code blocks
with a LaTeX attribute to resize them, or else they run off the page.
This named code block for this task is taken from
[[https://orgmode.org/manual/Results-of-Evaluation.html][the Org manual]], augmented to allow for centering.
We should always provide ~*this*~ for the ~data~ argument.
as in ~:post attr_wrap(data=*this*)~,
and also always set ~:exports results :results drawer~.
If we don't put the results in the drawer, they will pile up
as we evaluate the code block.
#+NAME: attr_wrap
#+BEGIN_SRC sh :var data="" :var width="\\\\textwidth" :var center="t" :results output
  echo "#+ATTR_LATEX: :width $width :center $center"
  echo "$data"
#+END_SRC

* Introduction
:PROPERTIES:
:CUSTOM_ID: Introduction
:END:

These notes were created for, and in some parts *during*,
the lecture on September 14th and the following tutorials.

* Motivation
:PROPERTIES:
:CUSTOM_ID: Motivation
:END:

** Scala as an object-oriented language
:PROPERTIES:
:CUSTOM_ID: Scala-as-an-object-oriented-language
:END:

Scala is a purely-object oriented language,
meaning that every value is an object (contrast this
with languages such as Java where some values
are “basic” and not objects).

Scala interops with Java, meaning that Java libraries can be used
in Scala code. It also supports many Java abstractions/constructs,
so it can be a (fairly) comfortable transition for Java programmers.

For instance, if we want to define a linked list type in Scala,
we can take an approach similar to what we might do in Java.
(This is a very naive definition and usage,
but it serves to prove the point.)
#+begin_src amm :results none
// Type annotations come after names, and are separated by a `:`.
// The `var` keyword indicates a variable.
class LinkedList[A](var hd: A, var tl: LinkedList[A]) {

  // Methods/functions are type annotated like values.
  // Scala uses an `=` in method/function declarations.
  // to emphasise that they should return a value.
  def head: A = {
    hd   // No semicolons necessary; a newline will do.
  }

  // No braces are needed if the right side's a single expression.
  def tail: LinkedList[A] = tl
}

// `val`'s are constant, unlike `var`'s.
val l1: LinkedList[Int] = new LinkedList[Int](1, null)

// There's no need to specify a type if Scala can infer it.
// Here it can see that the type parameter `A` is `Int` on the right.
val l2: LinkedList[Int] = new LinkedList(2, l1)

// In fact, it can tell the type of the `val` too.
val l3 = new LinkedList(3, l2)


// Let's define a value as a quick sanity test.
val test1 = l1.head == 1
#+end_src

But this is only one part of Scala,
and for our purposes it's the less interesting part.
(We could just use Java for this much.)

** Scala as a functional language
:PROPERTIES:
:CUSTOM_ID: Scala-as-a-functional-language
:END:

We are interested in Scala primarily because it supports
functional abstractions.

The distinguishing abstractions of
functional programming languages are:
1. Functions are values, i.e., data.
  - This is referred to by the term “first-class functions”,
    implying that functions are not excluded
    from being treated as data.
  - This allows for /higher-order/ functions;
    functions which take other functions as argument.
2. All values (data) are /immutable/.
   - (At least in “pure” functional languages.)
   - Variables still change throughout the program,
     but only because they are bound to different values
     at different points in the runtime.
     Not because an assignment/update was carried out.
     - For instance, in a recursive call, the arguments change.

We will concern ourselves with (1) another time.
For today, we are considering (2).

Briefly, the advantage to immutable data is that
enables the programmer a level of certainty that is not available
if data is mutable.

Consider for a moment this pseudocode regarding
our earlier linked lists.
#+begin_example amm
// This is pseudocode
val l1: LinkedList[Int] = … // Some complicated list creation

somebodyElsesFunction(l1)
#+end_example
What can I say about my list ~l1~ after I run “somebody else's”
function on it?

Answer: not much! It could have changed in many ways,
so anything I knew about it may no longer be true.

*** Aside: Downside to immutability
:PROPERTIES:
:CUSTOM_ID: Aside:-Downside-to-immutability
:END:

There is a not insignificant downside to enforcing immutability
in a language/code base.

If all data is immutable, then to “make changes” to a value
(such as a list or a tree),
we must in fact make a copy of that value
with the changes we want applied.

As you can imagine, this copying is expensive,
both in terms of space and time.

/However/, well-designed languages can mitigate this
in various ways, including by having values “share”
some pieces of themselves.

* The (extended) Boom hierarchy                 :theory:
:PROPERTIES:
:CUSTOM_ID: The-(extended)-Boom-hierarchy
:END:

We now briefly take with a (relatively brief) dive into some theory,
to give us an example type to consider in Scala.

** Introduction
:PROPERTIES:
:CUSTOM_ID: Introduction
:END:

The Boom hierarchy was introduced
by [[https://www.kestrel.edu/people/meertens/publications/][Lambert Meertens]] in
[[https://www.kestrel.edu/people/meertens/publications/papers/Algorithmics.pdf][Algorithmics — Towards programming as a mathematical activity]];
Meertens attributes the concept to H. J. Boom, hence the name.

The Boom hierachy is a family of data structures
—namely trees, lists, bags and sets—
for which we have an ~empty~ value and can construct ~singleton~ values,
and which include a ~join~ operation
(for sets and bags also called ~union~, written ~∪~,
and for lists also called ~append~, ~++~).

:TODO:
Notation:
- ~[]~ for empty,
- ~[a]~ for a singleton containing ~a~,
- ~++~ for append.

The basic idea of the hierarchy is that
- sets have a ~join~ operation which
  - has an identity ~A ∪ ∅ = A~,
  - is idempotent ~A ∪ A = A~,
  - is commutative ~A ∪ B = B ∪ A~, and
  - is associative ~A ∪ (B ∪ C) = (A ∪ B) ∪ C~. Then,
- bags are like sets, except the ~join~ operation is not idempotent,
- lists are like bags, except the ~join~ operation is not commutative, and
- trees are like lists, except the ~join~ operation is not associative.

The paper is interested in laws satisfied by the
higher-order functions ~reduce~ (often called ~fold~),
~map~ and ~filter~ over those structures.

** Extending the Boom hierarchy
:PROPERTIES:
:CUSTOM_ID: Extending-the-Boom-hierarchy
:END:

Alexander Bunkenburg's later paper
“[[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.49.3252&rep=rep1&type=pdf][The Boom Hierarchy]]” 
investigates this area further, by considering
what data structures can be obtained by taking different combinations
of the above listed features of the ~join~ operation.
The abstract of that paper reads
#+begin_quote
“The Boom Hierarchy is the family of data structures tree, list, bag, set.
By combining their properties in other ways,
more data structures can be made, like mobiles.
The paper defines the data structures of this extended Boom Hierarchy
and shows how the functions reduce, map, and filter are applied to them.”
#+end_quote

For instance, through this process we arrive at
- the ~nonempty list~ data structure or ~nonempty tree~ data structure,
  which lack an identity.
- the ~mobile~ data structure, which are like trees
  except that they “can spin” (the branching order is arbitrary).

** Visualising the Boom hierarchy
:PROPERTIES:
:CUSTOM_ID: Visualising-the-Boom-hierarchy
:END:

We can visualise the layout of some of these structures:
#+begin_src dot :file media/BOOM.png :exports results :results drawer :post attr_wrap(data=*this*)
digraph T {
  Set    [label="Sets\n\nJoin ∪ has unit ∅ and is\nidempotent, commutative\nand associative",    style=dashed]
  Bag    [label="Bags\n\nJoin ∪ has unit ∅ and is\ncommutative and\nassociative",    style=dashed]
  Mobile [label="Mobiles\n\nJoin “branch” has unit “empty” and\nis commutative", style=dashed]
  List   [label="Lists\n\nJoin ++ has unit [] and is\nassociative."]
  NEList [label="Nonempty lists\n\nJoin ++ is\nassociative."]
  Tree   [label="Trees (with values in leaves)\n\nJoin “branch” has unit “empty”."]
  NETree   [label="Nonempty trees (with values in leaves)\n\nJoin “branch” has none of the properties."]

  Count      [label="Add counting",    shape=rectangle]
  Order1     [label="Add ordering",    shape=rectangle]
  Order2     [label="Add ordering",    shape=rectangle]
  Structure1 [label="Add “structure”", shape=rectangle]
  Structure2 [label="Add “structure”", shape=rectangle]
  Nonempty1  [label="Require an element", shape=rectangle]
  Nonempty2  [label="Require an element", shape=rectangle]

  Set    -> Count      [dir=none]; Count      -> Bag
  Bag    -> Order1     [dir=none]; Order1     -> List
  Bag    -> Structure1 [dir=none]; Structure1 -> Mobile
  List   -> Structure2 [dir=none]; Structure2 -> Tree
  List   -> Nonempty1  [dir=none]; Nonempty1  -> NEList
  Mobile -> Order2     [dir=none]; Order2     -> Tree
  Tree   -> Nonempty2  [dir=none]; Nonempty2  -> NETree
}
#+end_src

#+RESULTS:
:results:
#+ATTR_LATEX: :width \textwidth :center t
[[file:media/BOOM.png]]
:end:

Not all of these types are easily representable in most programming languages;
we can say they are /abstract/ types instead of /concrete/ types.
I've highlighted the ones which are not in the diagram using dashed lines.

Exercise: Why are those types not easily represented in standard
programming languages?

Exercise: Is it impossible for those types to be easily represented
in a programming language?

* The Boom hierarchy in Scala                   :application:
:PROPERTIES:
:CUSTOM_ID: The-Boom-hierarchy-in-Scala
:END:

#+begin_center
*Heads up: this section consists of failed attempts*
*and subsequent corrections. Read carefully, and double check*
*before borrowing any code. Or skip to the next section.*
#+end_center

Let us try to implement the lists discussed in the Boom hierarchy
in Scala, and make them /immutable/, for the reasons discussed in
[[Scala as a functional language][Scala as a functional langauge]].

** The ~AppendList~ type
:PROPERTIES:
:CUSTOM_ID: The-AppendList-type
:END:

Let us implement the list type as described in the Boom hierarchy paper
in Scala. We'll call these ~AppendList~, as they take ~Append~ as
the basic operation.

#+begin_center
*Extra heads up: there's a big flaw in defining lists this way,*
*so even when we get it right we're wrong.*
*We'll discuss the problem at the end.*
#+end_center

Those lists have three cases;
- the ~Empty~ list,
- the ~Single~-ton lists, and
- the ~Concat~-enation of two lists.

The Scala convention for implementing types such as this
that consist of a number of cases by first giving
a /super-type/ which a /sub-type/
for each case will /extend/ (extending is also called inheriting).

This super-type should not be instatiable,
because we want to restrict instatiability to the given cases.
(Recall from 2fa3: types should have *no junk* and no confusion.) 

A ~trait~ is similar to a ~class~, except it cannot be instantiated
—meaning it cannot be constructed.
It is similar to an ~interface~ in Java.
(This also makes it similar to an ~abstract class~,
except it's more flexible; see
[[https://docs.scala-lang.org/overviews/scala-book/abstract-classes.html][the Scala docs]].)
#+begin_example amm :results none
trait AppendList[A]
// sub-class definitions yet to come
#+end_example

In fact, in the interest of not introducing “junk”,
we should use the ~sealed~ keyword which prevents code
from outside this block from extending ~AppendList~.
#+begin_example amm
sealed trait AppendList[A]
// sub-class definitions yet to come
#+end_example

** Attempt 1 at defining cases of lists: basic classes
:PROPERTIES:
:CUSTOM_ID: Attempt-1-at-defining-cases-of-lists:-basic-classes
:END:

Now we need to add sub-types which are instantiable.
Note that every instance (value) of one of the sub-types
is also a value of the super-type.
So even though ~AppendList~ cannot be instantiated,
we can create ~AppendList~ values.

(Yes, this means a single value can have many types;
specifically, it has a chain of types,
each one a sub-type of the next).

Exercise: where does the chain end?

We can fill in a ~class~ for each case.
#+begin_src amm :results none
trait AppendList[A]
class Empty[A]() extends AppendList[A]
class Single[A](a: A) extends AppendList[A]
class Concat[A](l: AppendList[A], r: AppendList[A]) extends AppendList[A]
#+end_src

But if we try out this definition, we may be disappointed.
#+begin_src amm :results none
val empty1 = new Empty[Int]
val empty2 = new Empty[Int]

val list1 = new Concat(new Single(1), new Single(2))

empty1 == empty2  // equality check
#+end_src
:TODO: why? what's so bad about the result of the equality check?

:TODO: The fact that this check failed tells me these are not the same in memory.

*** Aside: Notions of equality
:PROPERTIES:
:CUSTOM_ID: Aside:-Notions-of-equality
:END:

:TODO:

** Attempt 2 at defining cases of lists: case classes
:PROPERTIES:
:CUSTOM_ID: Attempt-2-at-defining-cases-of-lists:-case-classes
:END:

Our ~class~ based definition above caused two instances
of the same list (same in the sense that their
construction was the same)
as different (unequal) lists.

The reason comes back to mutability.
A regular ~class~ may have mutable data (non-constant fields).
So the runtime is aware that ~empty1~ and ~empty2~ could
actually be different (even though, with just our definitions above,
there isn't a way to make them significantly different).

Since we intend to work with immutable data,
we need something more than just ~class~.

Specifically, what we want is provided in
Scala by a ~case class~.
A ~case~ class has no mutable state (no non-constant fields).
(Additionally all its fields are public).
#+begin_src amm :results none
sealed trait AppendList[A]
case class Empty[A]() extends AppendList[A]
case class Single[A](a: A) extends AppendList[A]
case class Concat[A](l: AppendList[A], r: AppendList[A]) extends AppendList[A]
#+end_src

The name ~case class~ is used because
we often /pattern match/ (or, equivalently, /case split/)
over types defined this way.

** The inherent problem with ~AppendList~
:PROPERTIES:
:CUSTOM_ID: The-inherent-problem-with-~AppendList~
:END:

#+begin_quote
“Each data structure is the
free algebra of its binary operation ~++.~”
#+end_quote
This means, since ~a ++ [] = a~ by the identity law,
in the paper, ~a ++ []~ and ~a~ will both be the same value of ~List~.

Let's try that in Scala.
#+begin_src amm :results none
sealed trait AppendList[A]
case class Empty[A]() extends AppendList[A]
case class Single[A](a: A) extends AppendList[A]
case class Concat[A](l: AppendList[A], r: AppendList[A]) extends AppendList[A]

val listofone = Single(1)
val anotherlistofone = Concat(listofone, Empty())

listofone == anotherlistofone
#+end_src

:TODO: We have confusion!

* A proper implementation of lists in Scala.
:PROPERTIES:
:CUSTOM_ID: A-proper-implementation-of-lists-in-Scala.
:END:

#+begin_src elm
type List a = Empty | Cons a (List a)
#+end_src

Our final, correct implementation
ensures there is only one way to construct a given (abstract) list,
by using “more concrete” constructors.
#+begin_src amm :results none :tangle ./src/ConsList.sc
sealed trait ConsList[A]
case class Empty[A]() extends ConsList[A]
case class Cons[A](hd: A, tl: ConsList[A]) extends ConsList[A]
#+end_src

We can try out some definitions on this type.
#+begin_src amm :results none :tangle ./src/ConsList.sc
def sum(xs: ConsList[Int]): Int = xs match {
  case Empty() => 0
  case Cons(hd, tl) => hd + sum(tl)
}

def append[A](xs: ConsList[A], ys: ConsList[A]): ConsList[A] =
  xs match {
    case Empty() => ys
    case Cons(hd, tl) => Cons(hd, append(tl, ys))
  }
#+end_src

#+begin_src amm :results none
val test = Cons(1,Cons(2,Cons(3,Empty())))
val test2 = Cons(1,Cons(2,Cons(3,Empty())))

append(test,test2)
#+end_src

* Reset the REPL!
:PROPERTIES:
:CUSTOM_ID: Reset-the-REPL!
:END:

A nice feature of the Ammonite REPL for Scala
is that you can save and load the session state,
allowing you to more safely try things out
and then restore to an earlier state if you need to.
See https://ammonite.io/#Save/LoadSession

To save, run
#+begin_src amm :results none
repl.sess.save()
#+end_src

To load, run
#+begin_src amm :results none
repl.sess.load()
#+end_src

Note you can provide strings as arguments to name the states
being saved/loaded.

If you don't use names, and need to restore an older state,
you can use ~repl.sess.pop(n)~ to pop ~n~ saved states off the session.

If you simply want to restart, just off an extreme number
of saved states.
#+begin_src amm :results none
repl.sess.pop(999)
#+end_src
