#+Title: Introduction to Prolog
#+Author: Mark Armstrong
#+Description: An introduction to Prolog and the logical programming paradigm.
#+SETUPFILE: ../../org-html-themes/setup/theme-readtheorg-local.setup

* LaTeX settings                                :noexport:

#+LaTeX_header: \usepackage{unicode-math}
#+LaTeX_header: \usepackage{unicode}

* Introduction
:PROPERTIES:
:CUSTOM_ID: Introduction
:END:

These notes were created for, and in some parts *during*,
the lecture on September 18th and the following tutorials.

* Motivation
:PROPERTIES:
:CUSTOM_ID: Motivation
:END:

Today, we begin investigating another non-imperative paradigm
other than functional programming: /logical programming/.

As we've seen in the previous hands-on lecture,
functional programming takes advantage of /immutability/ in order
to make reasoning about programs easier.
It also focuses on /compositionality/, including
in its use of /higher-order functions/, all of which
makes programming very much like writing functions in mathematics
(where there is no mutable state).

Logical programming also assumes immutability,
but instead of compositionality as a method of computation,
it uses a (Turing-complete) subset of first-order predicate logic.
Programs are databases of /inference rules/ describing the problem domain,
and programs are initiated by /queries/ about the problem domain which
the system tries to prove are true (a logical consequence of the rules)
or false (refutable by the rules).

To put it simply, in logical programming, you describe the problem,
rather than the solution.

* A note about fonts
:PROPERTIES:
:CUSTOM_ID: A-note-about-fonts
:END:

In these notes, I use plaintext blocks in order to write the
inference rules, and use em-dashes (—) to create the horizontal rules.

In some cases, the em-dashes may not show quite correctly.
For instance, in the PDF version of these notes, there is
a small space between each dash. In some browsers, they
may not show at all (they work in my install of Chrome, at least.)

Apologies for any issues reading these notes caused by this.

* (Re)introduction to inference rules
:PROPERTIES:
:CUSTOM_ID: (Re)introduction-to-inference-rules
:END:

Recall: an inference rule has the form
#+begin_src text
 Premise₁   Premise₂   …   Premiseₙ
————————————————————————————————————— Rule Name
            Conclusion
#+end_src
where ~Premise₁~, ~Premise₂~, …, and ~Premiseₙ~ are some statements in our
domain, and ~Conclusion~ is a statement
that can be concluded from the premise statements.

In the domains of logics, the statements range over formulae
(i.e., boolean expressions built up from
boolean constants, predicates and propositional connectors),
and we may have rules such as
#+begin_src text
  P     Q
———————————— ∧-Introduction
   P ∧ Q
#+end_src
which says “given ~P~ and ~Q~, we may conclude ~P ∧ Q~”,
#+begin_src text
   P ∧ Q
——————————— ∧-Eliminationˡ
     P
#+end_src
which says “given ~P ∧ Q~, we may conclude ~P~”, and
#+begin_src text
  P     P ⇒ Q
——————————————— Modus Ponens
     Q
#+end_src
which says, by translating the ~⇒~ to English,
“given ~P~ and if ~Q~ follows from ~P~, then we can conclude ~Q~”.

(Technically, these are /rule schemas/;
the /meta-variables/ ~P~ and ~Q~ can be instantiated
to obtain specific rules.)

Note that in these rules, we have the following /meta-syntax/:
1. Whitespace between premises is understood as a form of conjunction.
2. The horizontal rule is understood as a form of implication.

Any rule which does not have a premise is called an /axiom/;
axioms are the known results of our domain, which do not need to be proven.
For instance,
#+begin_src text
————————— ⊤-Introduction
  true
#+end_src

A collection of inference rules (or rule schemas)
and axioms gives us a /proof system/.

See, for instance,
the [[https://cs.uwaterloo.ca/~david/cl/natural-deduction-pfenning.pdf][natural deduction]] proof calculus
for classical logic.

You have likely seen the /equational/ approach to proofs
which is favoured by Gries and Schneider's
“A Logical Approach to Discrete Math”, and used in
[[https://www.cas.mcmaster.ca/~kahl/CS2DM3/2020/][CS/SE 2dm3 at McMaster]]
using the [[http://calccheck.mcmaster.ca/][CalcCheck tool]].
Proof systems are an alternate approach to proof;
see [[https://alhassy.github.io/CalcCheck/LectureNotes.html#Rules-of-Equality-and-Proof-Trees-vs-Calculational-Proofs][Musa's notes on the relationship]] from this year's 2dm3.

Inside of a proof system, we may construct proofs of statements
via /proof trees/, which are trees where every node is a statement,
and the connections between nodes correspond to the use of rules.

For instance, we have the following silly proof of ~true~ which
uses the rules given above.
#+begin_src text
—————— ⊤-Introduction        —————— ⊤-Introduction
 true                         true
——————————————————————————————————— ∧-Introductionˡ
          true ∧ true
       ————————————————— ∧-Eliminationˡ
             true
#+end_src

Notice, by convention, we write proof trees
from the *bottom up*.
The root, at the bottom, is what we intend to prove.
The leaves, at the top, must either
1. be axioms, or
2. be local assumptions.

Proof trees may be read from the top down,
to see how the conclusion follows from the axioms and assumptions.
It is generally better to read from the bottom up, though;
otherwise the proof often seems to make
unwarranted steps, or informally, it “pulls a rabbit from its hat”.
   
* Inference rules in other domains
:PROPERTIES:
:CUSTOM_ID: Inference-rules-in-other-domains
:END:

The use of inference rules is not limited to the domain of logics.

It is perhaps better not to think of inference rules
as defining a /proof system/ (which makes us think
of truth values and logics),
but as defining a /game/: starting from
the rules and axioms, what can we obtain?

For instance, consider the following problem.

** The two bucket problem
:PROPERTIES:
:CUSTOM_ID: The-two-bucket-problem
:END:

*** The problem
:PROPERTIES:
:CUSTOM_ID: The-problem
:END:

Suppose you are given two buckets,
- one of which holds 5 units of water, and
- one of which holds 3 units of water.

You are tasked with collecting exactly 4 units of water;
no more, and no less.
You begin with 0 units in both buckets.

You may at any point
- fill one bucket entirely from a tap,
- pour the water out of a bucket, emptying it entirely, or
- pour one bucket into another until either the first is empty
  or the second is full.

You are tasked with collecting exactly 4 units of water
using only those three kinds of actions.

*** The rules
:PROPERTIES:
:CUSTOM_ID: The-rules
:END:

Let us represent the state of the bucket by a pair of numbers.
In these rules, we will use
- ~x~ as a meta-variable for the amount
  in the bucket which can hold 5 units, and
- ~y~ as a meta-variable for the amount
  in the bucket which can hold 3 units.

We can begin only if we have 0 units in both buckets.
#+begin_src text

          ––––––––— Start
            0 , 0
#+end_src

The action of filling a bucket replaces its current amount
with the maximum amount.
#+begin_src text
  X , Y                  X , Y
––––––––— Fillˡ        ––––––––– Fillʳ
  5 , Y                  X , 3
#+end_src

The action of emptying a bucket replaces its current amount
with 0.
#+begin_src text
  X , Y                  X , Y
––––––––— Emptyˡ       ––––––––– Emptyʳ
  0 , Y                  X , 0  
#+end_src

:TODO:
#+begin_src text
     X , Y        
–—–––––––————–– Pourˡ (provided X + D ≤ 5 ∧ Y - D ≥ 0 ∧ (X + D = 5 ∨ Y - D = 0))
 X + D , Y - D

     X , Y        
––––––––––––––— Pourʳ (provided X - D ≥ 5 ∧ Y + D ≤ 0 ∧ (X - D = 0 ∨ Y + D = 3))
 X - D , Y + D
#+end_src

* Prolog
:PROPERTIES:
:CUSTOM_ID: Prolog
:END:

** Programs are databases of inference rules
:PROPERTIES:
:CUSTOM_ID: Programs-are-databases-of-inference-rules
:END:

Prolog programs are simply databases of inference rules,
also called /clauses/.
An inference rule
#+begin_src text
 A₁   A₂   …   Aₙ
––––––––––––––––––––
      B
#+end_src
is written in Prolog as the clause
#+begin_src prolog
b :- a1, a2, …, an.
#+end_src
(the … is pseudocode, not Prolog syntax)
(notice the period ending the rule).
As with our inference rule, this rule states that
~b~ is true if all of the ~aᵢ~ are true.
So we can think of ~:-~ as ~⇐~, and ~,~ as ~∧~.

An axiom
#+begin_src text
––––––––––––––
      C
#+end_src
can be written in Prolog as
#+begin_src prolog
c :- true.
#+end_src
or, more simply,
#+begin_src prolog
c.
#+end_src

** Get “output” by making queries
:PROPERTIES:
:CUSTOM_ID: Get-“output”-by-making-queries
:END:

To interact with Prolog programs, we make /queries/, to which Prolog
responds by checking its inference rule database to determine
possible answers.

For instance, list catenation in SWI Prolog is a ternary predicate
#+begin_example prolog
append(X,Y,Z)
#+end_example
the rules of which enforce that ~Z~ is the result
of catenating ~X~ and ~Y~.

So we can make queries about catenation, such as
#+begin_example prolog
% Is [1,2,3,4,5,6] the result of catenating [1,2,3] and [4,5,6]?
?- append([1,2,3], [4,5,6], [1,2,3,4,5,6])
% Response:
% true.


% What are all the possible values of Z for which
% Z is the catenation of [1,2,3] and [4,5,6]?
?- append([1,2,3], [4,5,6], Z)
% Response:
% Z = [1, 2, 3, 4, 5, 6]


% What are the possible values of X and Y so that,
% when they are catenated, the result is [1,2,3,4,5,6]?
?- append(X, Y, [1,2,3,4,5,6])
% Response:
% X = [],
% Y = [1,2,3,4,5,6] ;
% X = [1],
% Y = [2,3,4,5,6] ;
% …
#+end_example

Note: in this way, we get several “functions” from one predicate,
depending upon what question(s) we ask!

** Names, kinds of terms
:PROPERTIES:
:CUSTOM_ID: Names,-kinds-of-terms
:END:

In Prolog, any name beginning with an upper case letter
denotes a variable.

Names which begin with lower case letters are /atoms/,
which are a type of constant value.
Atoms may be used as the name of predicates.

Character strings surrounded by single quotes, ~'~,
are also atoms. So we can write
#+begin_example prolog
'is an empty list'([]).
#+end_example

As you would expect, Prolog also has numerical constants,
such as ~1~ or ~3.14~.

Aside from variables and constants,
the remaining kind of Prolog term is a /structure/,
which has the form
#+begin_example prolog
atom(term1, …, term1)
#+end_example
(again, the … is pseudocode.)

** Interacting with Prolog
:PROPERTIES:
:CUSTOM_ID: Interacting-with-Prolog
:END:

As we've said, a Prolog program consists of clauses
(inference rules.)
For instance
#+begin_example prolog
head(X) :- body(X,Y)
#+end_example
which can be interpreted as having meaning
#+begin_src text
∀ X ‌∙ head(X) ⇐ (∃ Y • body(X,Y))
#+end_src
Then during computation, given this clause and the goal ~head(X)~,
the Prolog runtime is tasked with finding a substitution for ~Y~
which makes ~body(X,Y)~ true.

We provide Prolog with goals through queries,
usually by loading our programs into the interactive query REPL,
either by running
#+begin_src shell
$ swipl my-program.pl
#+end_src
from the command line, or
#+begin_example prolog
?- consult('my-program.pl')
#+end_example
once running SWI Prolog.
We can also ~assert~ or ~retract~ rules in the query REPL, if needed.
(Also, use ~listing~ or ~listing(name)~ to see all given clauses
or clauses about the ~name~ predicate.)

** Unification
:PROPERTIES:
:CUSTOM_ID: Unification
:END:

The computation model of Prolog involves /unification/ of terms.
Terms unify if either
1. they are equal, or
2. they contain variables that can be instantiated in a way
   that makes the terms equal.

So in general, unification involves /searching/ for possible
variable bindings, by making use of the clauses
and /modus ponens/ ($(P ∧ P ⇒ Q) ⇒ Q$).

*** The goal list
:PROPERTIES:
:CUSTOM_ID: The-goal-list
:END:

Through this process, the single goal presented by a query
will usually turn into a collection of goals;
for instance, if we query ~?- p(5).~ and the search uses a clause
#+begin_example prolog
p(X) :- q(X), r(X).
#+end_example
then we now have as goals ~q(5)~ and ~r(5)~.

*** Backtracking
:PROPERTIES:
:CUSTOM_ID: Backtracking
:END:

Consider the program
#+begin_src prolog :tangle ./src/sept20-backtracking.pl
a :- b, c.
a :- b.

b.
c :- false.
#+end_src

As the Prolog runtime tries to prove ~a~, it will use the first clause,
and ~fail~ (because in trying to prove ~c~, it reaches ~false~,
which it cannot prove.)
At that point, it has to /backtrack/, and try a different
clause to prove ~a~.

In general, the runtime will backtrack several times
during a proof, and it keeps track of which clauses
have been tried.

:TODO: Aside: contradictory clauses
#+begin_example prolog
a :- false.
a.
#+end_example

*** SWI Prolog's search strategy
:PROPERTIES:
:CUSTOM_ID: SWI-Prolog's-search-strategy
:END:

1. Attempt to apply clauses in order from top to bottom
   (as in the source code.)
   - Only backtrack and try other clauses
     after success or failure.
2. Perform a depth first search trying to prove each goal.
   - So if the current goals are ~b~ and ~c~,
     try to prove ~b~ before considering ~c~.

*** Examining the search strategy
:PROPERTIES:
:CUSTOM_ID: Examining-the-search-strategy
:END:

In order to interactively see the process Prolog is using
during unification,
use the ~trace.~ command in the REPL.
Then each query will result in a log of calls made and
failures encountered.

** Equality
:PROPERTIES:
:CUSTOM_ID: Equality
:END:

Prolog does have an equality comparison , written simply ~=~ (not ~==~).
*However*, this equality does no simplification.
So, for instance, if a variable ~X~ has been unified to value ~5~,
#+begin_example prolog
X = 5
#+end_example
would be ~true~, but
#+begin_example prolog
X = 2 + 3
#+end_example
would be ~false~.

This non-simplifying equality allows us to consider
the /construction/ of terms, rather than just their value.
But in case we want to actually carry out arithmetic
or calculate other values,
we can use the ~is~ comparison.
#+begin_example prolog
X is 2 + 3
#+end_example
will evaluate to ~true~.

** Exerting control over the search; the cut operator
:PROPERTIES:
:CUSTOM_ID: Exerting-control-over-the-search;-the-cut-operator
:END:

In part because Prolog's searching mechanism can be naive,
the programmer is given a certain amount of control
over the search.

The most important mechanism for controlling the search
that we will see is the /cut/.

A cut is written ~!~, and can be understood as
“no backtracking is allowed to go beyond this point”.

** Failure
:PROPERTIES:
:CUSTOM_ID: Failure
:END:

In order to force a search to fail, we can use a strategic cut
along with the ~false~ predicate (which cannot be proven),
as in
#+begin_src prolog
p :- !, false.
#+end_src

When this clause is used, the cut is encountered,
preventing any backtracking.
Then, we immediately state the goal ~false~,
which cannot be proven.
So, the runtime must give up here, and return ~false~.

Note that we are not really specifying the return value
by writing ~false~; instead, we are exerting our control
over the search to ensure a ~false~ result.

** Trying to write the two bucket problem
:PROPERTIES:
:CUSTOM_ID: Trying-to-write-the-two-bucket-problem
:END:

In an ideal world, we would be able to almost directly translate
the above inference rules into Prolog, like so.
#+begin_example prolog
buckets(0,0).
buckets(5,Y) :- buckets(_,Y).
buckets(X,3) :- buckets(X,_).
buckets(0,Y) :- buckets(_,Y).
buckets(X,0) :- buckets(X,_).
buckets(DX,DY) :-
  DX is X + D, DY is Y - D,
  buckets(X,Y),
  DX <= 5,
  DY >= 0,
  DX is 5 or DY is 0.
buckets(DX,DY) :-
  DX is X - D, DY is Y + D,
  buckets(X,Y),
  DX >= 0,
  DY <= 3,
  DX is 0 or DY is 3.
#+end_example
(Note the ~_~ is used where we would have a “singleton” variable,
i.e., a variable which appears nowhere else in a clause.
The ~_~ is simply an anonymous variable name, and using it
reassures Prolog that we didn't mean to refer to another variable.)

But using our knowledge of SWI Prolog's search strategy,
we can quickly see a problem with the order of these clauses.
:TODO:

** Checking for divisors of a number
:PROPERTIES:
:CUSTOM_ID: Checking-for-divisors-of-a-number
:END:

#+begin_src prolog :tangle ./src/sept21-divisors.pl
hasDivisorLessThanOrEqualTo(_,1) :- !, false.
hasDivisorLessThanOrEqualTo(X,Y) :- 0 is X mod Y, !.
hasDivisorLessThanOrEqualTo(X,Y) :- Z is Y - 1, hasDivisorLessThanOrEqualTo(X,Z).
#+end_src

* Resources
:PROPERTIES:
:CUSTOM_ID: Resources
:END:

- [[https://github.com/alhassy/PrologCheatSheet][Prolog cheat sheet]],
  by Musa Al-hassy.
  - Includes links to several other resources.
- [[https://cseweb.ucsd.edu/~goguen/courses/130w04/prolog.html][Lecture notes on Prolog]]
  by Joseph Goguen, UC San Diego.
