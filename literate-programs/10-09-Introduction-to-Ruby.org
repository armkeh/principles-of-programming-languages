#+Title: Introduction to Ruby
#+Author: Mark Armstrong
#+Description: A brief tour of Ruby.
#+SETUPFILE: ../../org-html-themes/setup/theme-readtheorg-local.setup

* LaTeX settings                                :noexport:

#+LaTeX_header: \usepackage{unicode-math}
#+LaTeX_header: \usepackage{unicode}

* Introduction
:PROPERTIES:
:CUSTOM_ID: Introduction
:END:

These notes were created for, and in some parts *during*,
the lecture on October 9th and the following tutorials.

* Motivation
:PROPERTIES:
:CUSTOM_ID: Motivation
:END:

So far, we have been investigating
- the functional paradigm, using Scala,
  - which happens to also be a pure object-oriented language, and
- the logical paradigm, using Prolog.

We now investigate an /imperative/ pure object-oriented language, Ruby.

Ruby's syntax is also heavily influenced by Lisp,
and the final language we will investigate later in the course
is a Lisp.
So Ruby acts as a stepping stone to that point.

* Background on Ruby
:PROPERTIES:
:CUSTOM_ID: Background-on-Ruby
:END:

Ruby is an almost purely object-oriented language,
heavily inspired by Smalltalk, Lisp and Perl.

It's creator, Yukihiro “Matz” Matsumoto,
has documented these inspirations in
[[http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/179642][a post on ruby-talk]].
#+begin_quote
Ruby is a language designed in the following steps:

  * take a simple lisp language (like one prior to CL).
  * remove macros, s-expression.
  * add simple object system (much simpler than CLOS).
  * add blocks, inspired by higher order functions.
  * add methods found in Smalltalk.
  * add functionality found in Perl (in OO way).
#+end_quote

Ruby was a language born out of Matz's interests
and love of certain language features.
He's [[https://ruby-doc.org/docs/ruby-doc-bundle/FAQ/FAQ.html][said]]
about its creation
#+begin_quote
Well, Ruby was born on February 24 1993.
I was talking with my colleague about the possibility of
an object-oriented scripting language.
I knew Perl (Perl4, not Perl5), but I didn't like it really,
because it had smell of toy language (it still has).
The object-oriented scripting language seemed very promising.

I knew Python then. But I didn't like it,
because I didn't think it was a true object-oriented language
─ OO features appeared to be add-on to the language.
As a language manic and OO fan for 15 years,
I really wanted a genuine object-oriented,
easy-to-use scripting language.
I looked for, but couldn't find one.

So, I decided to make it.
It took several months to make the interpreter run.
I put it the features I love to have in my language,
such as iterators, exception handling, garbage collection.

Then, I reorganized the features of Perl into a class library,
and implemented them. I posted Ruby 0.95 to
the Japanese domestic newsgroups in Dec. 1995.
#+end_quote

* General syntax
:PROPERTIES:
:CUSTOM_ID: General-syntax
:END:

See the
[[https://docs.ruby-lang.org/en/2.4.0/syntax_rdoc.html][Ruby documentation]]
for a good overview of the syntax. We try to cover
the most important parts here and in the following sections.

Ruby, being a “scripting language”, has a somewhat C-like syntax
that may remind you of Python or possibly Javascript.

The major difference between Ruby and Python
is that whitespace does not indicate structure in Ruby.

Instead, to indicate the beginning and ending of a scope,
we use ~begin~ and ~end~ keywords.
(~begin~ is not used if there is already an indication
of the beginning of the scope.)
#+begin_src ruby :results output
# Denote the end of a method with an end keyword
# begin is not used, since we have a def.
def f(x)
  return x
end

puts f(5)
#+end_src

#+RESULTS:
: 5

Ruby has a good variety of control structures.
#+begin_src ruby :results output
if (true)
  puts "hello"
end

if false
  puts "goodbye"
elsif true
  puts "world"
else
  puts "I don't get here."
end

# There is the "ternary if"
true ? puts("first one") : puts("second one")
x = true ? "first one" : "second one"
puts x

# It's not needed really.
y = if true then "this works" else "or does it?" end
puts y

# We don't need to negate conditions; we have an unless operator
unless true
  puts "The meaning of life"
else
  puts "You're out of luck"
end

# There is a switch statement
x = 12345
case x
when 12345
  puts "here we are"
when 123
  puts "not here"
else
  puts "and not here"
end
#+end_src

#+RESULTS:
: hello
: world
: first one
: first one
: this works
: You're out of luck
: here we are

Not discussed here:
- ~while~ loops
- ~until~ loops
- ~for~ loops
- ~break~ statements
- ~next~ statements
  - (skips to the next iteration in a loop.)

* Dynamic typing, heterogenous collections
:PROPERTIES:
:CUSTOM_ID: Dynamic-typing,-heterogenous-collections
:END:

In most languages, lists, arrays and (hash)maps
are /homogenous/ collections; they include only one type of element.

This is not the case in a dynamic (typed) language
such as Ruby.

So we can have arrays and maps with multiple types.
#+begin_src ruby :results output
a = ["Arrays", :can, "contain", 1, "or more different types"] 
h = {:and => "So can hashes.", "see" => a, 0 => 12345}

print a
print "\n"
print h
#+end_src

#+RESULTS:
: ["Arrays", :can, "contain", 1, "or more different types"]
: {:and=>"So can hashes.", "see"=>["Arrays", :can, "contain", 1, "or more different types"], 0=>12345}

* “Purely object-oriented”
:PROPERTIES:
:CUSTOM_ID: “Purely-object-oriented”
:END:

** Preamble                                    :ignore:

What does it mean when I have said, both about Ruby and Scala,
that they are purely object oriented?

Quite simply, that all /data/ is represented as an /object,
and all operations are /methods/!

Another view of this: all data is objects,
and all operations are messages between objects.

** Integers are objects, operations are methods
:PROPERTIES:
:CUSTOM_ID: Integers-are-objects,-operations-are-methods
:END:

For instance, consider integers, which in many languages are
a /basic/, /builtin/ type that do not have an implementation
within the language. This is not the case in a pure language!
In both Ruby and Scala, integers are objects,
and operations on them are methods.

So code such as
#+begin_src ruby :session
5 + 8
#+end_src

#+RESULTS:
: 13

or in Scala,
#+begin_src amm
5 + 2
#+end_src

#+RESULTS:
: res1: Int = 7

could instead be written
#+begin_src ruby :session
5.+(9)
#+end_src

#+RESULTS:
: 14

#+begin_src amm
5.+(2)
#+end_src

#+RESULTS:
: res3: Int = 7

that is, ~+~ is a method of the first argument, being passed
the second argument as a parameter.
The form ~x ⊕ y~ is just /syntactic sugar/.

** Integers are objects, operations are /messages/
:PROPERTIES:
:CUSTOM_ID: Integers-are-objects,-operations-are-/messages/
:END:

In Ruby, we can move one level of abstraction higher:
all data are objects, and all operations
are /messages between objects/.
This harkens back to SmallTalk, one of the founding languages
of the object oriented paradigm.
#+begin_src ruby :session
5.send("+", 3)
#+end_src

#+RESULTS:
: 8

So even the form ~x.⊕(y)~ is syntactic sugar!

In Scala, moving to this message passing abstraction
is not possible, at least not easily; why?
- Answer: because Scala is statically typed!
  It is unlikely the typechecker will parse a string
  to see what method is being invoked.
  - And even if we wanted to make the typechecker do so,
    that only handles to case of constant strings;
    what if the string is constructed earlier in the program,
    or its value is given as an argument?

* Output methods
:PROPERTIES:
:CUSTOM_ID: Output-methods
:END:

There are at least three useful output methods in Ruby.
- ~print~ prints out an object without a newline at the end.
- ~puts~ does output a newline, and on arrays, outputs each element
  on its own line.
- ~p~ just outputs raw objects.
#+begin_src ruby :results output
print(["Prints", "out", "the", "object", "without", "a", "new", "line"])
print "\n"

puts(["Each", "element", "on", "a", "newline"])
puts "And a newline at the end as well."
puts "See?"

print "Outputs a string with a newline\n"
p "Outputs the raw string\n"
#+end_src

#+RESULTS:
#+begin_example
["Prints", "out", "the", "object", "without", "a", "new", "line"]
Each
element
on
a
newline
And a newline at the end as well.
See?
Outputs a string with a newline
"Outputs the raw string\n"
#+end_example

* Postfix forms
:PROPERTIES:
:CUSTOM_ID: Postfix-forms
:END:

One nice feature of Ruby is that it has
an abuntant amount of syntactic sugar.
For instance, we have the standard control structures
such as ~if~:
#+begin_src ruby :results output
x = if 2 + 3 == 5
      "2 + 3 is 5; good"
    elsif 2 + 3 == 6
      "oh no!!!"
    else
      "oh no"
    end

print("x is: ", x)
#+end_src

#+RESULTS:
: x is 2 + 3 is 5; good

If you are only using a “then” branch, you can write
the ~if~ after the body.
#+begin_src ruby :results output
puts("1 + 1 is 2") if 1 + 1 == 2
#+end_src

#+RESULTS:
: 1 + 1 is 2


We can do the same with at least some of the loops
#+begin_src ruby :results output
x = 0
y = 0

x = x + 1 while x < 10
while y < 10 do y = y + 1 end

puts(x)
puts(y)
#+end_src

#+RESULTS:
: 10
: 10

* Method naming conventions
:PROPERTIES:
:CUSTOM_ID: Method-naming-conventions
:END:

Note; in this section, we use the phrase “by convention” frequently.
This is because the method naming conventions are exactly that:
conventions. Their properties are not actually enforced by Ruby.

By convention, methods ending with a ~?~ are /predicates/.
They do not /necessarily/ return a boolean, but should
return a “truth value” of some kind.
#+begin_src ruby
6.even?
#+end_src

#+RESULTS:
: true

By convention, methods ending with a ~!~ are /destructive/;
they modify the receiver.
#+begin_src ruby :results output
x = [1,3,2]
y = [5,6,4]

x.sort! # Changes the value of x
z = y.sort # Does not change the value of y. 

print("[1,3,2] sorted is ", x, "\n")
print("The original ", y, " did not get sorted; see?\n")
print("Here's the sorted version: ", z)
#+end_src

#+RESULTS:
: [1,3,2] sorted is [1, 2, 3]
: The original [5, 6, 4] did not get sorted; see?
: Here's the sorted version: [4, 5, 6]

See the Ruby documentation on [[https://docs.ruby-lang.org/en/2.7.0/doc/syntax/methods_rdoc.html#label-Method+Names][method names]]
for discussion of the the bang and question mark postfixes.

Methods ending with a ~=~ indicate an /assignment/ method.
These methods should “behave like assignment”.
See the [[https://docs.ruby-lang.org/en/2.7.0/doc/syntax/assignment_rdoc.html#label-Assignment+Methods][Ruby documentation]].
Unlike with the ~?~ and ~!~ postfixes,
*using the ~=~ postfix /does/ actually change the method's behaviour*;
specifically, the return value of a ~=~ method is ignored.
The arguments to the method are returned instead.

Assignment methods can be called using a special syntax;
given an assignment method ~my_attribute=~ and
an instance of the class ~my_instance~,
we can write
#+begin_example ruby
my_instance.my_attribute = "A new value"
#+end_example
instead of
#+begin_example ruby
my_instance.my_attribute=("A new value")
#+end_example

* Defining classes
:PROPERTIES:
:CUSTOM_ID: Defining-classes
:END:

** The basics
:PROPERTIES:
:CUSTOM_ID: The-basics
:END:

A class declaration in Ruby for a class named ~Name~ is
begun by simply saying
#+begin_example ruby
class Name
#+end_example

Instance variables
(whose value is unique per object of the class)
begin with a ~@~.
We do not declare explicitly declare variables in Ruby,
but you can initialise them to “declare” them
(you don't need to though; they can be initialised inside
a constructor or other methods.)

Class variables
(whose value is shared by each object of the class)
begin with a ~@@~.
(In other languages, these are often called ~static~ members.)

It is common to want to define /getters/ and /setters/ for instance
variables in OO programming.
For example,
#+begin_src ruby :results output
class MyContainer
  
  def initialize(thing=nil)
    @thing = thing
  end

  def thing
    @thing
  end

  # Assignment method syntax
  def thing=(thing)
    @thing = thing
  end
end

container = MyContainer.new()
container.thing = 5
puts(container.thing)
#+end_src

#+RESULTS:
: 5

Because this is so common, there is a shorthand
to avoid declaring these methods.
#+begin_src ruby :results output
class MyContainer
  attr_accessor :thing   # :thing is a symbol; essentially in interned string
  # attr_reader   provides only the getter
  # attr_writer   provides only the setter

  def initialize(thing=nil)
    @thing = thing
  end
end

container = MyContainer.new()
container.thing = 5
puts(container.thing)
#+end_src

#+RESULTS:
: 5

:TODO: initialize is the constructor

** Inheritance
:PROPERTIES:
:CUSTOM_ID: Inheritance
:END:

:TODO:

#+begin_src ruby
class C1

class C2 < C1
#+end_src

** TODO Mixins
:PROPERTIES:
:CUSTOM_ID: Mixins
:END:

https://ruby-doc.com/docs/ProgrammingRuby/html/tut_modules.html

** COMMENT Custom lists
:PROPERTIES:
:CUSTOM_ID: COMMENT-Custom-lists
:END:

#+begin_src ruby :results output
# My own class of lists.
# Note that these lists misbehave if you try to store nil in them;
# specifically, lists which start with nil are treated as empty,
# so everything following a nil in the list will be ignored.
class MyList

  # Create readers for two fields, here and next.
  attr_reader :here
  attr_reader :next
  
  # Initialise a list as a singleton or an empty list.
  def initialize(val=nil)
    @here = val
    @next = nil
  end

  # Add a value to the beginning of a list
  # Note that we test if the head (@here) is tested against nil;
  # lists with a nil head are considered to be empty.
  def prepend(val)
    if @here != nil
      # Reproduce the current list, making it the new next list
      @next = self.clone()
    end
    @here = val
    return self
  end

  def catenate(l)
    if @here != nil and @next != nil
      # keep recursing until we reach the end of our list
      @next = @next.catenate(l)
    elsif @here != nil
      # at the end, attach a copy of l
      @next = l.clone()
    else
      # there is no list here; just copy l
      @here = l.here
      @next = l.next
    end
    return self
  end

  def to_s
    if @here and @next
      return @here.to_s + " :: " + @next.to_s
    elsif @here
      return @here.to_s + " :: eol"
    else
      return "eol"
    end
  end

end

# The list containing 1, prepended with 2, catenated with the list containing 3
# 2 ∷ 1 ∷ 3 ∷ eol
puts ((MyList.new(1)).prepend(2)).catenate(MyList.new(3))
#+end_src

#+RESULTS:
: 2 :: 1 :: 3 :: eol
