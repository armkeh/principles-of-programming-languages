#+Title: Computer Science 3MI3 - Principles of Programming Languages
#+Subtitle: 2020 Course Homepage
#+Author: Mark Armstrong
#+Date: July 31st, 2020
#+Description: The course homepage for the 2020 class of 3mi3.
#+Options: num:nil
#+SETUPFILE: ./org-html-themes/setup/theme-bigblow-local.setup

# TODO: export README when this is exported.

* Communication
:PROPERTIES:
:CUSTOM_ID: Communications/Announcements
:END:

** November
:PROPERTIES:
:CUSTOM_ID: November
:END:

- November 25th ::

  - Testing is now included for homework 8.
    Because this is so late (on the scheduled due date),
    there will be at least a one day extension,
    to be finalised later today.

- November 19th ::

  - Homework 8 is now posted. Its due date has been shifted to be
    Wednesday of next week.

    The remaining homework deadlines are also going to be shifted
    to be on Wednesdays for the remainder of the course.

- November 15th ::

  - Some extra text and examples have been added to assignment 2
    based on some questions I've received.

- November 10th ::

  - The testing and more detailed specifications
    for assignment 2 are now posted.
    Sorry for the numerous delays.
    - Note that a somewhat small change was required to the
      Ruby code for the untyped calculus ([[./assignments/src/a2_ulterm.rb][~a2_ulterm.rb~]].)
      The tests need to compare /UL/ terms, and so
      the ~==~ method had to be defined for that type.
    - The assignment itself contains an update section
      with any other important information you will need
      about changes.

- November 9th ::

  - Assignment 2's due date has now been shifted to November 26th.
    Testing and more detailed instructions should be released by
    the end of day today.
  - There will not be a homework released for this week
    (i.e., the homework that was to be released Friday, November 6th
    has been cancelled.)
    
    The remaining homeworks will all be shifted down by 1,
    so homework 8 is released this Friday, homework 9 the following,
    and homework 10 the week after that.
    This does mean there are now 10 homeworks instead of 11.

- November 6th ::

  - A significant error in the homework 7 tests sample output
    was reported by some of your classmates during lecture today
    (thank you Omar and Paul.) It has been corrected now.
    - The final test case, which corresponds to the nameless term
      #+begin_src text
Œª Œª Œª (0 1) (2 3)
      #+end_src
      (updated November 8th; previously there were incorrectly 4 ‚ÄúŒª‚Äù's above)
      previously was given an example output of
      #+begin_src text
lambda a . lambda b . lambda c . ((a) (b)) ((c) (d))
      #+end_src
      But notice how the first variable in the body
      refers to the outermost abstraction here,
      whereas the example in the homework specification shows
      (and the definition of nameless terms in the assignment specifies)
      that it should refer to the *innermost* abstraction.
      A correct sample output would instead be
      #+begin_src text
lambda a . lambda b . lambda c . ((c) (b)) ((a) (d))
      #+end_src
      
- November 5th ::

  - Testing code has been added to homework 7.
  - Some minor updates the the current homework and
    assignment have been posted; see the updates section for each.
    - More updates (more significant updates, such as testing)
      are to come later today.

- November 3rd ::

  - The notes on propagating errors using the ~Option~ type
    from Monday's tutorial have been cleaned up,
    added to, and now posted under the tutorial notes
    subsection of the literate program section of the site.
    
- November 2nd ::

  - The recordings section has been updated with new links
    (for the first time in a while üôÅ.)

- November 1st ::

  - Homework 7 has been posted.
    - This is slightly delayed from Friday;
      however, this homework is fairly light (there's just one part.)

  - I've made a first small update to assignment 2.
    - Part 4 has been made bonus, though some code I was
      planning to supply is now part of the required work
      for that bonus.

  - More assignment 2 updates are to come ASAP;
    in particular, I will decide upon the change to the due date
    and provide the testing.

** October
:PROPERTIES:
:CUSTOM_ID: October
:END:

- October 30th ::

  - The first version of assignment 2 is posted.
    - The due date is currently not set. It will be announced.
    
- October 29th ::

  - The second C++ example has been added to homework 6,
    showing an approach to representing the expression language
    using subclasses.

    Some errors were also fixed; the ‚Äúpart 2‚Äù now correctly specifies
    that you should construct an ~interpret~ method,
    and the specified name of the file for the bonus portion was corrected.

- October 28th ::

  - I am very sorry to cancel another lecture,
    and without any notice, but
    I am cancelling today's lecture.
    - The content of what would have been today's lecture
      will instead be covered on Friday,
      - and there will not be a live coding lecture this week.
    - I will try to have the recorded lecture promised from Friday
      out today,
    - but it will only be posted after the assignment 2 is posted
      (which will be published today.)
      
  - Notes from the tutorials this week have been uploaded,
    under the tutorials subsection of the literate programs section.
    - They should be cleaned up later today or tomorrow,
      (some commentary should be added to the literate portions)
      but they are provided for your convenience now.

- October 23rd ::
  - Homework 6 has been posted.
  - Today's (live coding) lecture is cancelled, and I'll be posting notes
    and a recording to replace it sometime over the weekend.
    - I apologise; I'm just not quite up for the lecture today.
    - The content of the lecture is not required for the planned
      homework in any case, which will still be posted today.
  - Instructions for installing Ruby and the version used for
    the Docker testing (2.7.2) are now given in a ‚Äúpart 0‚Äù
    of homework 5, and under the Ruby section of this page.

- October 21st ::
  - The assignment's boilerplate now specifies the grading
    for the documentation portion.
    It is not assigned a specific grade;
    instead, 20% of each part is for documentation.

- October 20th ::
  - An aside about variable substitution was added to the assignment 1,
    as requested during lecture yesterday.

- October 19th ::
  - A short example of using the ~Option[Either[Int,Boolean]]~ type,
    which is used in part 4 of the assignment,
    has been in the notes now posted at the top of
    the Scala section of this site.
    - See the [[./language-tidbits/scala.html][HTML site]] or
    - [[./language-tidbits/scala.pdf][PDF]].

- October 17th ::
  - Marks for homework 1 have now been distributed to your
    GitLab repositories. See the file ~marks.org~,
    which can be viewed with nice formatting on the web interface
    for your repo.
    
  - Homework 3 sample solutions are now posted
    (inside the homework document as usual.)

- October 14th ::
  The Prolog tests and Docker setup have been added to assignment 1.

- October 13th ::

  - Assignment 1 has undergone a fairly major update,
    - adding the assignment boilerplate,
      - which includes
        a *new (literate) documentation file requirement*,
    - correcting the instructions on how to implement
      the types of parts 3 and 4 in Scala,
    - changing some type, method and predicate names
      to ensure a uniform naming standard across the assignment, and
    - adding the testing code for the Scala portions
      (though the scripts are still to come.)

  - *To repeat, there is now a (fairly light)*
    *(literate) documentation requirement for assignment 1!*
    - See the boilerplate.

  - Before it is asked, at this point, I am not planning
    a further extension for assignment 1.

  - The testing and Docker setup for homework 5
    was posted yesterday evening.

- October 12th ::

  - Homework 5 is now posted. The testing is to follow later today.
  - I apologise for the relative ‚Äúradio silence‚Äù since Friday.
    I have had some personal things come up over the weekend so far,
    but the updates to the assignment (mentioned in lecture)
    and then the marks for the submitted homeworks
    will be coming shortly.
    
- October 7th ::
  - Homework 4 is now posted.
    - Testing and Docker setup are included immediately this time.
      
  - A sample solution is now in place in the homework 2 document.
  - Notes from last week's Wednesday tutorial and lecture are now posted;
    sorry for the delay.

- October 6th :: The notes on infinite data in Scala
  have been updated with the developments from Monday's tutorial.
  This content will be reviewed and possibly built upon
  in tomorrow's tutorial, and you should review it
  for the (still to come) homework 4.

- October 2nd ::
  - Notes for today's lecture on infinite data in Scala
    have been posted under ‚ÄúLiterate programs‚Äù.
  - Unfortunately, I'm not on track to release homework 4 this evening;
    I need to iron out some details to try and make sure
    they are right the first time.
    - It should be released tomorrow by end of day.
    - In any case, this homework is not due until the Monday
      after reading week, so there will be lots of time to work on it.

- October 1st ::
  - Docker setup has been added for the homework 3 testing.
  - A sample solution has been added to the homework 1 document.
    
** September
:PROPERTIES:
:CUSTOM_ID: September
:END:

- September 29th :: Some of the names in the homework 3 testing script
  were inconsistent with the homework's instructions.
  The scripts have been corrected now.

  Additionally,
  - I have removed the blank bonus task from homework 3.
    I can't think of a fitting bonus for this week üôÅ.

  - The link to the Scala tests was broken. It is corrected now.

- September 28th :: Test scripts for homework 3 have been posted.
  The Docker setup is to follow shortly.

- September 27th :: Assignment 1 has been posted.
  The boilerplate and testing will come ASAP;
  I am catching up on more pressing content first,
  such as the testing for homework 3.

  #+begin_center
*Note that the deadline date for assignment 1 has changed.*
*It is now due October 21st, two weeks later than originally stated.*
*This change is reflected in the outline and the Avenue course's schedule.*
  #+end_center

- September 26 :: A statement on how testing and grading relate
  has been added to the homework section of this site,
  under the new current homework section.

  Additionally, the description of the efficiency tests
  for homework 2's bonus has been updated.
  The number of inferences applied on my sample solutions is now provided,
  which is a better metric to compare to than the time those tests
  took on my machine (which is, naturally, likely going to execute code
  at a different speed than your machine.)
  Note: in addition to comparing your solution to my sample solution,
  the marking for the bonus will also compare your solution
  to the rest of the class. So the bonus marks assigned
  will be relative to the average performance.

- September 25 :: Homework 3 is posted.
  - The bonus is still to come; I need to think of one üòÄ.

  Also, tests for the efficiency of your code in homework 2
  have been added to the homework 2 files.

- September 25 :: Live coding notes for today,
  on programming trees in Prolog, have been uploaded.

- September 24 :: A new ‚ÄúProlog tidbits‚Äù document has been uploaded
  and can be found under the Prolog section/tab on this site.

  I will aim to add information and examples to this file
  as I answer people's questions on the language and our homeworks in it,
  so that you can refer there if you have questions.

- September 23 :: The files and instructions for using Docker
  to test homework 2 are now uploaded.
  The instructions and links can be found in the homework 2 document.

- September 23 :: The completed version of notes 2 is now uploaded.

  Also,
  - *I've had to make one more edit to the provided code*
    *for ~isDigitList~; don't include the cut in the first case*. 
  - Habib's tutorial notes are now posted in the
    literate programs section of the homepage.

- September 23 :: There has been a change to the
  ~isDigitList~ question in homework 2.
  Please review that question.
  (For those who may have already completed it,
  reversing the list should adapt your current solution
  to the new requirements.)

  Also, unit tests for checking your homework 2
  have now been provided in the homework 2 document.

  Important notes regarding this testing:
  1. Unlike homework 1, for homework 2 it is /mandatory/
     that your code pass these tests.
  2. There is no interface file that you need to complete.
     You still only need submit your ~h2.pl~ file.
  3. Passing these tests does not guarantee a particular grade.
     What has been provided is intended to act as a /sanity check/,
     and more thorough tests may be used in the grading process.

  Instructions and files for using Docker to run the tests
  will be provided later today.

- September 22 :: More recording links have been added to the list.
  Also,
  - The homework boilerplate has been updated
    to indicate that use of the standard
    higher-order operators is always allowed.
  - Instructions for testing homework 1 using Docker are now uploaded
    (obviously too late to be useful, but added for completion's sake.)
    Similar setup and instructions will be added for homework 2 shortly.
  - A poor choice of wording regarding ~isDigitList~ has been changed
    in homework 2; ‚Äúthe first digit of ~X~ ‚áí the ‚Äúones‚Äù digit of ~X~‚Äù.

- September 18 :: Homework 2 has been posted.

- September 18 :: The notes from the live coding lecture
  have been properly placed in that section.

  They will be updated ASAP to include relevant code
  for the upcoming homework.

- September 18 :: Testing code has been uploaded for homework 1,
  in the homework file itself.
  *For this homework, it is optional that you complete the*
  *testing interface and submit it with your homework*.
  For future homeworks and assignments, tests will be provided
  in a more timely manner and required.

  Also note, the requirement to name both instances of
  your ~flatten~ and ~orderedElems~ function the same
  has been dropped.

- September 17 :: A note has been added to the course outline
  regarding use of *plaintext* or *code snippet markup*
  when sharing code in discussions with staff and on Teams,
  *instead of screenshots*.
  Also see the post in the general chat on Teams
  regarding how to use the code snippet formatting tool.

  Additionally:
  - A note was added to homework 1
    regarding the marking of the ~orderedElems~ question.
    And a small error regarding usage of two type parameters
    was fixed in the ~StructTree~ problem.

- September 16 :: The typos encountered in today's lecture
  have all been corrected (if I missed any, let me know.)
  - The first parse tree example has been corrected,
    and I've also massaged the definition of parse tree's a bit
    so that we don't need to draw the ‚Äúpointless nodes‚Äù
    I mentioned. The first example shows what we omit.

  Also note, especially for those in the Monday tutorial,
  the live coding notes on Scala have been updated.
  - A motivation section has been added which should better
    describe why we are coding the way we are in Scala.
  - One further update will be coming with some changes
    that came up during today's tutorial.

- September 15 :: Each student of this course should now have a
  (private) GitLab repository, at the address
  https://gitlab.cas.mcmaster.ca/cs3mi3-2020-student-repos/macid
  where ~macid~ is your McMaster ID.
  
  There were some initial issues with the ~master~ branch being protected,
  so you could not ~push~ to it; those should be resolved now.

  Please ~commit~ and ~push~ to your repo ASAP,
  even if it's just some placeholder files,
  to confirm everything is working.

  Please /do/ use the ~master~ branch for submitting homework.
  There is no need to create other branches for this course,
  though you are free to do so if you want to.

  If you seem unable to log in to the CAS GitLab,
  please try to follow the instructions to reset your CAS password
  that are located to the left of the login form.

- September 15 :: A recordings section has been added to this website
  with links to the recordings of lectures and tutorials on Streams
  (which I hope work for everyone, and not just me).

- September 14 :: The (still a bit incomplete) live coding notes
  from lecture and tutorial today have been posted.
  Note the new section along the top for these notes.
  They'll be cleaned up after Wednesday's tutorial.
  
- September 14 :: To address some questions which have come up
  in lectures and tutorials so far:
  - ‚ÄúAre we going to alternate between different programming languages
    or will we stick to Scala for a while?‚Äù
    - A good question, and something I meant to discuss
      but never got to.
      
      The rough timeline for introducing languages is intended to be
      - September 14th: introduce Scala (today)
      - September 18th: introduce Prolog (Friday)
      - October 7th: introduce Ruby
      - November 6th: introduce Clojure
      Assignment 1 will use Scala and Prolog,
      assignment 2 will use Scala and Ruby, and
      assignment 3 will use Prolog and Clojure.
      Homeworks may alternate sometimes, but I intend to focus on
      the languages which are being used for the current assignment
      in each homework.

      This is a much faster pace for
      picking up a language than previous courses,
      but we are usually focusing on a relatively small number
      of ideas in each language.

      Leverage what you know from previous courses,
      ask lots of questions (please!),
      and when in doubt, look closely at provided examples.

  - ‚ÄúCan we use IntelliJ for Scala?‚Äù, ‚ÄúDo we have to use Ammonite?‚Äù, etc.
    - You can use whatever tools you wish to for writing your code
      and interacting with Scala.
      On our end, we will be using Ammonite, but
      there should not be conflicts,
      and I intend to release a Docker image you can use
      to test for conflicts later this week.
  - ‚ÄúDo we have to use Docker?‚Äù
    - Not explicitely, though it's /strongly/ encouraged.
      Docker images will be provided so you can ensure
      your code works on the system it will be marked on.
      It is unlikely we will encounter conflicts in any case,
      but it is better to be certain by using the Docker images.
  - ‚ÄúWill live coding lecture and tutorial notes be posted?‚Äù
    - Yes, they will be posted, and should be available
      in the usual set of formats.
  Also,
  - Note that homework 1 was updated over the weekend
    with submission guidelines and a homework code of conduct
    related to collaboration. Please review it.

- September 11 :: Homework 1 has been uploaded and can be found
  under the homework section.
  - I am aware of the issues with the images in the PDF version;
    they will be fixed shortly.
  Also of note:
  - The Monday lecture will be a live coding session introducing
    some basic Scala concepts.
  - The tutorials will be running next week, and will be used
    to discuss Scala further.
  
- September 11 :: Reminder that the first lecture is today, at 1:30pm.
  It will be in the lectures and tutorials channel in Microsoft Teams.

- September 11 :: The first section of notes,
  [[1 ‚Äì Introduction and overview]], is now complete and uploaded.

- September 9 :: The Microsoft Teams team for the course
  has been activated. Please ensure you have access,
  and contact me ASAP if you do not.

- September 7 :: I have decided to cancel
  the Wednesday lecture for this week, in support
  of [[https://scholarstrikecanada.ca/][Scholar Strike Canada]] and their mission
  ‚Äúto protest anti-Black, racist and colonial police brutality
  in the U.S., Canada and elsewhere.‚Äù
  I encourage everyone to spend the lecture time
  and any other time you have that day on
  the public digital teach-ins they are offering.

  The scholar strike is planned for September 9^{th} and 10^{th}.
  Note that the Friday lecture on the 11^{th}
  will still take place as scheduled.
  Note also that there are no tutorials scheduled this week.


- September 6 :: As of this point, I am waiting on UTS to allow me
  access to the course Microsoft Teams team.
  If this is not done by Wednesday,
  we will be using Zoom for lectures until I am able
  to activate  the team.


- September 6 :: The course outline is in near complete state;
  I am still waiting for confirmation of the teaching assistants.
  - In particular, please review the information on grading;
    we will not be having midterm or final exams for this course.

** August
:PROPERTIES:
:CUSTOM_ID: August
:END:

- August 3 :: Incomplete course outline added to homepage.

* Notes
:PROPERTIES:
:CUSTOM_ID: Lecture-notes
:END:

** Lecture slides
:PROPERTIES:
:CUSTOM_ID: Lecture-slides
:END:

The slides are available as
- Online ~reveal.js~ 2-dimensional slideshows,
- printable PDFs, or
- text-editor friendly plaintext Org files.

*** 1 ‚Äì Introduction and overview
:PROPERTIES:
:CUSTOM_ID: 1-‚Äì-Introduction-and-Overview
:END:

- [[./notes/1--Introduction-and-overview.html][Online slides]]
- [[./notes/1--Introduction-and-overview.pdf][PDF]]
- [[./notes/1--Introduction-and-overview.org][Org plaintext]]

*** 2 ‚Äì Formal languages
:PROPERTIES:
:CUSTOM_ID: 2-‚Äì-Formal-languages
:END:

- [[./notes/2--Formal-languages.html][Online slides]]
- [[./notes/2--Formal-languages.pdf][PDF]]
- [[./notes/2--Formal-languages.org][Org plaintext]]

*** 3 ‚Äì An untyped Œª-calculus, /UL/
:PROPERTIES:
:CUSTOM_ID: 3-‚Äì-An-untyped-Œª-calculus,-/UL/
:END:

- [[./notes/3--An-untyped-lambda-calculus-UL.html][Online slides]]
- [[./notes/3--An-untyped-lambda-calculus-UL.pdf][PDF]]
- [[./notes/3--An-untyped-lambda-calculus-UL.org][Org plaintext]]

*** 4 ‚Äì Bindings and scope
:PROPERTIES:
:CUSTOM_ID: 4-‚Äì-Bindings-and-scope
:END:

- [[./notes/4--Bindings-and-scope.html][Online slides]]
- [[./notes/4--Bindings-and-scope.pdf][PDF]]
- [[./notes/4--Bindings-and-scope.org][Org plaintext]]

*** 5 ‚Äì Types
:PROPERTIES:
:CUSTOM_ID: 5-‚Äì-Types
:END:

- [[./notes/5--Types.html][Online slides]]
- [[./notes/5--Types.pdf][PDF]]
- [[./notes/5--Types.org][Org plaintext]]

*** 6 ‚Äì A typed Œª-calculus, /TL/
:PROPERTIES:
:CUSTOM_ID: 6-‚Äì-A-typed-Œª-calculus,-/TL/
:END:

- [[./notes/6--A-typed-lambda-calculus-TL.html][Online slides]]
- [[./notes/6--A-typed-lambda-calculus-TL.pdf][PDF]]
- [[./notes/6--A-typed-lambda-calculus-TL.org][Org plaintext]]

*** 7 ‚Äì Imperativeness
:PROPERTIES:
:CUSTOM_ID: 7-‚Äì-Imperativeness
:END:

- [[./notes/7--Imperativeness.html][Online slides]]
- [[./notes/7--Imperativeness.pdf][PDF]]
- [[./notes/7--Imperativeness.org][Org plaintext]]

*** 8 ‚Äì An imperative core, /WHILE/
:PROPERTIES:
:CUSTOM_ID: 8-‚Äì-An-imperative-core,-/WHILE/
:END:

- [[./notes/8--An-imperative-core-While.html][Online slides]]
- [[./notes/8--An-imperative-core-While.pdf][PDF]]
- [[./notes/8--An-imperative-core-While.org][Org plaintext]]

*** Appendix 1 ‚Äì Notation and conventions
:PROPERTIES:
:CUSTOM_ID: Appendix-1-‚Äì
:END:

- [[./notes/A1--Notation-and-conventions.html][Webpage]]
- [[./notes/A1--Notation-and-conventions.pdf][PDF]]
- [[./notes/A1--Notation-and-conventions.org][Org plaintext]]

*** Appendix 2 ‚Äì Software and tools
:PROPERTIES:
:CUSTOM_ID: Appendix-2-‚Äì
:END:

- [[./notes/A2--Software-and-tools.pdf][Webpage]]
- [[./notes/A2--Software-and-tools.pdf][PDF]]
- [[./notes/A2--Software-and-tools.org][Org plaintext]]

*** Appendix 3 ‚Äì External resources
:PROPERTIES:
:CUSTOM_ID: Appendix-3-‚Äì
:END:

- [[./notes/A3--External-resources.pdf][Webpage]]
- [[./notes/A3--External-resources.pdf][PDF]]
- [[./notes/A3--External-resources.org][Org plaintext]]

** Lecture hand-written notes
:PROPERTIES:
:CUSTOM_ID: Lecture-hand-written-notes
:END:

In some cases, some handwritten notes accompany the slides
during lecture. This term, those notes will be written
on paper that can be seen during the online lecture.

When necessary and possible,
those notes are scanned and made available here.
If any are missing that you would like to see, please ask.

- [[./notes/handwritten/sept30-currying.pdf][September 30th ‚Äì currying]]
- [[./notes/handwritten/sept23-trees.pdf][September 23rd ‚Äì Ambiguity in parse trees]]

* Literate programs
:PROPERTIES:
:CUSTOM_ID: Lecture-literate-programs
:END:

The last lecture of each week is usually
a hands-on live programming session.
Sometimes the same document is used for tutorials the following week.

Literate copies of the programs developed in those lectures and tutorials
are available here.
Particularly relevant portions of raw code are also included.

** Lectures
:PROPERTIES:
:CUSTOM_ID: Lectures
:END:

*** November 6th ‚Äì Introduction to Clojure
:PROPERTIES:
:CUSTOM_ID: November-6th-‚Äì-Introduction-to-Clojure
:END:

- [[./notes/live-coding/11-06-Introduction-to-Clojure.html][HTML]]
- [[./notes/live-coding/11-06-Introduction-to-Clojure.pdf][PDF]]
- [[./notes/live-coding/11-06-Introduction-to-Clojure.org][Org plaintext]]

*** October 9th ‚Äì Introduction to Ruby
:PROPERTIES:
:CUSTOM_ID: October-9th-‚Äì-Introduction-to-Ruby
:END:

- [[./notes/live-coding/10-09-Introduction-to-Ruby.html][HTML]]
- [[./notes/live-coding/10-09-Introduction-to-Ruby.pdf][PDF]]
- [[./notes/live-coding/10-09-Introduction-to-Ruby.org][Org plaintext]]

*** October 2nd ‚Äì Infinite data in Scala
:PROPERTIES:
:CUSTOM_ID: September-25th-‚Äì-Trees-in-Prolog
:END:

- [[./notes/live-coding/10-02-infinite-data-in-Scala.html][HTML]]
- [[./notes/live-coding/10-02-infinite-data-in-Scala.pdf][PDF]]
- [[./notes/live-coding/10-02-infinite-data-in-Scala.org][Org plaintext]]

Relevant raw code:
:TODO:

*** September 25th ‚Äì Trees in Prolog
:PROPERTIES:
:CUSTOM_ID: September-25th-‚Äì-Trees-in-Prolog
:END:

- [[./notes/live-coding/09-25-Trees-in-Prolog.html][HTML]]
- [[./notes/live-coding/09-25-Trees-in-Prolog.pdf][PDF]]
- [[./notes/live-coding/09-25-Trees-in-Prolog.org][Org plaintext]]

Relevant raw code:
- [[./notes/live-coding/src/tree.pl][The ~is_Tree~ predicates]] and some operations on trees.
  
*** September 18th ‚Äì Puzzles in Prolog
:PROPERTIES:
:CUSTOM_ID: September-18th-‚Äì-Puzzles-in-Prolog
:END:

- [[./notes/live-coding/09-18-Introduction-to-Prolog.html][HTML]]
- [[./notes/live-coding/09-18-Introduction-to-Prolog.pdf][PDF]]
- [[./notes/live-coding/09-18-Introduction-to-Prolog.org][Org plaintext]]

Relevant raw code:
:TODO:

*** September 14th ‚Äì The Boom hierarchy in Scala
:PROPERTIES:
:CUSTOM_ID: September-14th-‚Äì-The-Boom-hierarchy-in-Scala
:END:

- [[./notes/live-coding/09-14-Boom-hierarchy-in-Scala.html][HTML]]
- [[./notes/live-coding/09-14-Boom-hierarchy-in-Scala.pdf][PDF]]
- [[./notes/live-coding/09-14-Boom-hierarchy-in-Scala.org][Org plaintext]]

Relevant raw code:
- [[./notes/live-coding/src/ConsList.sc][The ~ConsList~ type]] and some operations on it.

** Tutorials
:PROPERTIES:
:CUSTOM_ID: Tutorials
:END:

Files from the Wednesday tutorial, led by Habib, are collected here.
In most cases, the material is largely similar to the
material from the lecture notes.

*** Monday November 16th ‚Äì Tail recursion in Clojure
:PROPERTIES:
:CUSTOM_ID: Monday-November-16th-‚Äì-Tail-recursion-in-Clojure
:END:

- [[./notes/tutorial/11-16-Tail-recursion-in-Clojure.html][HTML]]
- [[./notes/tutorial/11-16-Tail-recursion-in-Clojure.pdf][PDF]]
- [[./notes/tutorial/11-16-Tail-recursion-in-Clojure.org][Org plaintext]]

*** Monday November 2nd ‚Äì Propagating failure with the Option type
:PROPERTIES:
:CUSTOM_ID: Monday-November-2nd-‚Äì-Propagating-failure-with-the-Option-type
:END:

- [[./notes/tutorial/11-02-Propagating-failure-with-the-Option-type.html][HTML]]
- [[./notes/tutorial/11-02-Propagating-failure-with-the-Option-type.pdf][PDF]]
- [[./notes/tutorial/11-02-Propagating-failure-with-the-Option-type.org][Org plaintext]]
  
*** Monday October 26th & Wednesday October 28th ‚Äì Trees in Ruby
:PROPERTIES:
:CUSTOM_ID: Monday-October-26th-&-Wednesday-October-28th-‚Äì-Trees-in-Ruby
:END:

- [[./notes/tutorial/10-26-Trees-in-Ruby.html][HTML]]
- [[./notes/tutorial/10-26-Trees-in-Ruby.pdf][PDF]]
- [[./notes/tutorial/10-26-Trees-in-Ruby.org][Org plaintext]]

*** Wednesday October 21st ‚Äì
:PROPERTIES:
:CUSTOM_ID: Wednesday-October-21st-‚Äì
:END:

:TODO:

*** Wednesday October 7th ‚Äì
:PROPERTIES:
:CUSTOM_ID: Wednesday-October-7th-‚Äì
:END:

:TODO:

*** Wednesday September 30th ‚Äì Trees in Prolog
:PROPERTIES:
:CUSTOM_ID: Wednesday-September-30th-‚Äì-Trees-in-Prolog
:END:

- [[https://github.com/armkeh/principles-of-programming-languages/blob/master/notes/tutorial/Constructing%20a%20Tree%20Using%20the%20Prolog.ipynb][Prettified Jupyter notebook on GitHub]]
- [[./notes/tutorial/Constructing a Tree using the Prolog.ipynb][Jupyter notebook source]]
- [[./notes/tutorial/Constructing a Tree using the Prolog.pdf][PDF]]

*** Wednesday September 23rd ‚Äì Docker and Prolog
:PROPERTIES:
:CUSTOM_ID: Wednesday-September-23rd-‚Äì-Docker-and-Prolog
:END:

- [[https://github.com/armkeh/principles-of-programming-languages/blob/master/notes/tutorial/Introduction%20to%20Docker%20and%20Prolog.ipynb][Prettified Jupyter notebook on GitHub]]
- [[./notes/tutorial/Introduction to Docker and Prolog.ipynb][Jupyter notebook source]]
- [[./notes/tutorial/Introduction to Docker and Prolog.pdf][PDF]]

* Recordings
:PROPERTIES:
:CUSTOM_ID: Recordings
:END:

Lecture and tutorial recordings are available on Microsoft Stream.
As long as you are registered in the course,
the full list should be available
[[https://web.microsoftstream.com/group/16cec1b5-2ab3-4af9-9120-2ea9091b20c5?view=videos][here]].

Links directly to specific lectures/tutorials are also included below,
but this may not be updated quickly after lectures/tutorials.

** Note lectures
:PROPERTIES:
:CUSTOM_ID: Lectures
:END:

These lectures cover material from the [[Notes]] section of the website,
and usually take place on Mondays and Wednesdays.

- [[https://web.microsoftstream.com/video/5d454b17-ce30-42e3-b775-f5b2216cf451][November 2nd (Monday) ‚Äì Types (part 2)]]
- [[https://web.microsoftstream.com/video/efa0e5bf-3a86-43dc-bf61-1e26ea8fefb2][October 30th (Friday) ‚Äì Some Œª-calculus topics]]
- [[https://web.microsoftstream.com/video/8dbb8f80-3317-46be-91b0-28333c94effa][October 26th (Monday) ‚Äì Bindings and Scopes (part 3), Types]]
- [[https://web.microsoftstream.com/video/89249645-df76-4960-ae1f-46dfb1d2539b][October 21st (Wednesday) ‚Äì Bindings and scope (part 2)]]
- [[https://web.microsoftstream.com/video/4ac95e0c-37b9-4d93-af02-d828e72983fc][October 19th (Monday) ‚Äì Bindings and scope]]
- [[https://web.microsoftstream.com/video/521fe4e3-e3b5-40a0-b59a-3237136887e7][October 7th (Wednesday) ‚Äì And untyped Œª-calculus, /UL/ (part 3)]]
- [[https://web.microsoftstream.com/video/0c33b318-f644-49a9-905e-676594e9d5da][October 5th (Monday) ‚Äì And untyped Œª-calculus, /UL/ (part 2)]]
- [[https://web.microsoftstream.com/video/7c37e57d-4c10-4cae-914d-89b4e2e58a92][September 30th (Wednesday) ‚Äì An untyped Œª-calculus, /UL/]]
- [[https://web.microsoftstream.com/video/bed4dad7-dc7f-4721-8795-3c4d6d956a37][September 28th (Monday) ‚Äì Formal languages (part 4)]]
  - (also the beginning of ‚ÄúAn untyped Œª-calculus, /UL/‚Äù)
- [[https://web.microsoftstream.com/video/56841a6d-5ae0-4378-8c0d-ed7cce18a614][September 23rd (Wednesday) ‚Äì Formal language (part 3)]]
- [[https://web.microsoftstream.com/video/d7d61b56-b593-4c48-8890-b03e9ff71015][September 21st (Monday) ‚Äì Formal languages (part 2)]]
- [[https://web.microsoftstream.com/video/6aa707fa-3e68-4b61-8f6c-ed60e62f3b14][September 16th (Wednesday) ‚Äì Formal languages (part 1)]]
- [[https://web.microsoftstream.com/video/fe0b46f8-2512-4084-a399-f9d1b33257b6][September 14th (Monday) ‚Äì The Boom hierarchy in Scala]]
  - (also the end of ‚ÄúIntroduction and Overview‚Äù notes)
- [[https://web.microsoftstream.com/video/af55c09e-00dc-4d7c-a048-166907b6abd7][September 11th (Friday) ‚Äì Introduction and Overview]]

** Live coding lectures
:PROPERTIES:
:CUSTOM_ID: Live-coding-lectures
:END:

These lectures cover supplementary materials,
found in the [[Literate programs]] section of the website.
Usually this material lays the groundwork for the weeks homework.
These lectures usually take place on Fridays.

- [[https://web.microsoftstream.com/video/65c0ab12-344e-4bca-8b16-dc469b6e2339][October 9th (Friday) ‚Äì Introduction to Ruby]]
- [[https://web.microsoftstream.com/video/0a516345-0f40-40f3-a309-6bf9a3046188][October 2nd (Friday) ‚Äì Infinite data in Scala]]
- [[https://web.microsoftstream.com/video/6201a5a8-3757-4dc4-bb98-ff49628f4639][September 25th (Friday) ‚Äì Trees in Prolog]]
- [[https://web.microsoftstream.com/video/f29fc2dd-f3c0-40f6-9e67-a81eeb273065][September 18th (Friday) ‚Äì Logical games in Prolog]]
- [[https://web.microsoftstream.com/video/fe0b46f8-2512-4084-a399-f9d1b33257b6][September 14th (Monday) ‚Äì The Boom hierarchy in Scala]]

** Tutorials
:PROPERTIES:
:CUSTOM_ID: Tutorials
:END:

The contents of each week's tutorials is usually consistent
across the two tutorials.
We will put a note here in the case that there is a significant
difference between Monday and Wednesday.

- [[https://web.microsoftstream.com/video/4040de86-4326-4543-9b7e-893f980cb0b4][Week 7 Monday, November 2nd ‚Äì Propagating failure with the Option type]]
- [[https://web.microsoftstream.com/video/204cb8c0-196f-4982-864e-882b91629e2a][Week 6 Wednesday, October 28th ‚Äì Trees in Ruby]] (Mark)
- [[https://web.microsoftstream.com/video/03995825-e0dd-42bc-81b4-cc3e41f9a741][Week 6 Monday, October 26th ‚Äì Trees in Ruby]] (Mark)
- Week 5 Wednesday, October 21st ‚Äì Introduction to Ruby
  - Unfortunately not recorded.
- [[https://web.microsoftstream.com/video/9df1e93a-629c-4e8e-95c4-1326cc81e555][Week 5 Monday, October 19th ‚Äì Introduction to Ruby]] (Mark)
- [[https://web.microsoftstream.com/video/63bf6efc-7f16-4a0e-86ea-68778fc1e0ea][Week 4 Wednesday, October 7th ‚Äì More infinite data in Scala]] (Habib)
- [[https://web.microsoftstream.com/video/a44b3b3c-b61d-499f-b6c0-041613e13ccb][Week 4 Monday, October 5th ‚Äì More infinite data in Scala]] (Mark)
- [[https://web.microsoftstream.com/video/bb9938cd-ffec-43e6-b9d4-3a1e93b1ce2a][Week 3 Wednesday, September 30th ‚Äì More trees in Prolog]] (Habib)
- [[https://web.microsoftstream.com/video/7a37a812-9955-4edd-a08f-bd0d95ce4c25][Week 3 Monday, September 28th ‚Äì More trees in Prolog]] (Mark)
- [[https://web.microsoftstream.com/video/8f852c44-7249-42ca-9fc0-acc21578ecd5][Week 2 Wednesday, September 23rd ‚Äì Docker, Introduction to Prolog]] (Habib)
  - Covers Docker, which the Monday tutorial did not.
- [[https://web.microsoftstream.com/video/dd31d267-6de5-4cc1-afae-8e81b126d3f8][Week 2 Monday, September 21st ‚Äì Introduction to Prolog]] (Mark)
  - Discusses Prolog with a little more depth than the Wednesday tutorial.
- [[https://web.microsoftstream.com/video/da69ad32-13c9-4e26-904e-e06a66c3b537][Week 2 Wednesday, September 16th ‚Äì Algebraic data in Scala]] (Mark)
- [[https://web.microsoftstream.com/video/1f99aa1e-ee5e-4bb4-a27c-6c32175332fd][Week 2 Monday, September 14th ‚Äì Algebraic data in Scala]] (Mark)
  
* Homework
:PROPERTIES:
:CUSTOM_ID: Course-Work
:END:

** Current homeworks
:PROPERTIES:
:CUSTOM_ID: Current-homeworks
:END:

*** Homework 8 ‚Äì Visualing the call stack in Clojure ‚Äì Nov 19th to Nov 25th
:PROPERTIES:
:CUSTOM_ID: Homework-8-‚Äì-Visualing-the-call-stack-in-Clojure-‚Äì-Nov-19th-to-Nov-25th
:END:

- [[./homework/h8.html][HTML]]
- [[./homework/h8.pdf][PDF]]
- [[./homework/h8.org][Org plaintext]]

** Homework testing policy
:PROPERTIES:
:CUSTOM_ID: Homework-testing-policy
:END:

As of homework 2, automated unit tests are provided.
A Docker image is also provided, in order to ensure that
you are able to run the tests in the same environment
that we will run them in.

Passing the provided tests is /mandatory/.
And unless other issues are found, passing the tests
should imply you will receive a passing grade on the homework.
- But no particular grade is guaranteed.

The automated testing we run during marking will typically
include some number of additional tests,
usually chosen to test ‚Äúedge cases‚Äù.
You are encouraged to try and think of these cases yourselves,
and add appropriate tests to the provided ones
in order to better check your solutions.
This is not required though; a uniform set of tests
will be used for every student's submission.

** Previous homeworks
:PROPERTIES:
:CUSTOM_ID: Previous-homeworks
:END:

*** Homework 7 ‚Äì Pretty printing a representation of the untyped Œª-calculus ‚Äì Nov 1st to Nov 8th
:PROPERTIES:
:CUSTOM_ID: Homework-7-‚Äì-Pretty-printing-a-representation-of-the-untyped-Œª-calculus-‚Äì-Nov-1st-to-Nov-8th
:END:

- [[./homework/h7.html][HTML]]
- [[./homework/h7.pdf][PDF]]
- [[./homework/h7.org][Org plaintext]]

*** Homework 6 ‚Äì Representing and interpreting ~Expr~ in Ruby ‚Äì Oct 23rd to Nov 1st
:PROPERTIES:
:CUSTOM_ID: Homework-6-‚Äì-Representing-and-interpreting-~Expr~-in-Ruby-‚Äì-Oct-23rd-to-Nov-1st
:END:

- [[./homework/h6.html][HTML]]
- [[./homework/h6.pdf][PDF]]
- [[./homework/h6.org][Org plaintext]]

*** Homework 5 ‚Äì ‚ÄúFizzbuzz‚Äù-ing in Ruby ‚Äì Oct 12th to Oct 25th
:PROPERTIES:
:CUSTOM_ID: Homework-5-‚Äì-‚ÄúFizzbuzz‚Äù-ing-in-Ruby-‚Äì-October-12th-to-Oct-25th
:END:

Note the due date: the Sunday following reading week.

- [[./homework/h5.html][HTML]]
- [[./homework/h5.pdf][PDF]]
- [[./homework/h5.org][Org plaintext]]

*** Homework 4 ‚Äì Working with lazy (potentially infinite) lists in Scala ‚Äì Oct 7th to Oct 19th
:PROPERTIES:
:CUSTOM_ID: Homework-4-‚Äì-Working-with-lazy-(potentially-infinite)-lists-in-Scala-‚Äì-Oct-7th-to-Oct-19th
:END:

- [[./homework/h4.html][HTML]]
- [[./homework/h4.pdf][PDF]]
- [[./homework/h4.org][Org plaintext]]

*** Homework 3 ‚Äì Revisiting homework 1 in Prolog and homework 2 in Scala ‚Äì Sept 25th to Oct 4th
:PROPERTIES:
:CUSTOM_ID: Homework-3-‚Äì-Revisiting-homework-1-in-Prolog-and-homework-2-in-Scala-‚Äì-Sept-25th-to-Oct-4th
:END:

- [[./homework/h3.html][HTML]]
- [[./homework/h3.pdf][PDF]]
- [[./homework/h3.org][Org plaintext]]

*** Homework 2 ‚Äì Solving problems in Prolog ‚Äì Sept 18th to Sept 27th
:PROPERTIES:
:CUSTOM_ID: Homework-2-‚Äì-Solving-problems-in-Prolog-‚Äì-Sept-18th-to-Sept-27th
:END:

- [[./homework/h2.html][HTML]]
- [[./homework/h2.pdf][PDF]]
- [[./homework/h2.org][Org plaintext]]
  
*** Homework 1 ‚Äì Implementing Trees in Scala ‚Äì Sept 11th to Sept 20th
:PROPERTIES:
:CUSTOM_ID: Homework-1-‚Äì-Implementing-Trees-in-Scala-‚Äì-Sept-11th-to-Sept-20th
:END:

- [[./homework/h1.html][HTML]]
- [[./homework/h1.pdf][PDF]]
- [[./homework/h1.org][Org plaintext]]

* Assignments
:PROPERTIES:
:CUSTOM_ID: Assignments
:END:

** Assignment 2 ‚Äì Typing a Œª-calculus ‚Äì Oct 30th to Nov 26th
:PROPERTIES:
:CUSTOM_ID: Assignment-1-‚Äì-Interpreting-simple-integer-expressions-‚Äì-Sept-26th-to-Oct-21st.
:END:

- [[./assignments/a2.html][HTML]]
- [[./assignments/a2.pdf][PDF]]
- [[./assignments/a2.org][Org plaintext]]

** Assignment 1 ‚Äì Interpreting simple integer expressions ‚Äì Sept 26th to Oct 21st
:PROPERTIES:
:CUSTOM_ID: Assignment-1-‚Äì-Interpreting-simple-integer-expressions-‚Äì-Sept-26th-to-Oct-21st
:END:

- [[./assignments/a1.html][HTML]]
- [[./assignments/a1.pdf][PDF]]
- [[./assignments/a1.org][Org plaintext]]

** Assignment testing policy
:PROPERTIES:
:CUSTOM_ID: Assignment-testing-policy
:END:

Automated unit tests will be provided for all assignments.
A Docker image is also provided, in order to ensure that
you are able to run the tests in the same environment
that we will run them in.

Passing the provided tests is /mandatory/.
But unlike the homeworks, passing the provided tests
does *not* necessarily mean you will receive
a passing grade on the assignment.
The assignment grades are more heavily influenced
by a code inspection.

As with the homework,
the automated testing we run during marking will typically
include some number of additional tests,
usually chosen to test ‚Äúedge cases‚Äù.
You are encouraged to try and think of these cases yourselves,
and add appropriate tests to the provided ones
in order to better check your solutions.
This is not required though; a uniform set of tests
will be used for every student's submission.

* Course outline
:PROPERTIES:
:CUSTOM_ID: Course-outline
:END:

The course outline is available as
- a printer friendly [[file:./notes/0--Course-outline.pdf][PDF]],
- a screen friendly [[file:./notes/0--Course-outline.html][webpage]], or
- a text-editor friendly [[file:./notes/0--Course-outline.org][Org]] file.

The webpage is also embedded here for convenience.
@@html:<iframe src="notes/0--Course-outline.html" style="width: 100%; height: 75vh"></iframe>@@

* Scala
:PROPERTIES:
:CUSTOM_ID: Scala
:END:

Answers to some common or interesting questions regarding Prolog
can be found in the Prolog tidbits file, available as
- an [[./language-tidbits/scala.html][HTML site]],
- a [[./language-tidbits/scala.pdf][PDF]], or
- a plaintext [[./language-tidbits/scala.org][Org document]].

** Installation instructions
:PROPERTIES:
:CUSTOM_ID: Installation-instructions
:END:

#+INCLUDE: "./homework/h1.org::*Part 0.1: Installing Scala                  [0¬†points]" :only-contents t

* Prolog
:PROPERTIES:
:CUSTOM_ID: Prolog
:END:

Answers to some common or interesting questions regarding Prolog
can be found in the Prolog tidbits file, available as
- an [[./language-tidbits/prolog.html][HTML site]],
- a [[./language-tidbits/prolog.pdf][PDF]], or
- a plaintext [[./language-tidbits/prolog.org][Org document]].

** Installation instructions
:PROPERTIES:
:CUSTOM_ID: Installation-instructions
:END:

#+INCLUDE: "./homework/h2.org::* Part 0.1: Installing Prolog                            [0¬†points]" :only-contents t

* Ruby
:PROPERTIES:
:CUSTOM_ID: Ruby
:END:

** Installation instructions
:PROPERTIES:
:CUSTOM_ID: Installation-instructions
:END:

#+INCLUDE: "./homework/h5.org::* Part 0: Installing and using Ruby                       [0¬†points]" :only-contents t

* Clojure
:PROPERTIES:
:CUSTOM_ID: Clojure
:END:

:TODO:
