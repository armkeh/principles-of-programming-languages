#+Title: Introduction to Clojure
#+Author: Mark Armstrong
#+Description: An introduction to Clojure, a language in which
#+Description: programs themselves are written as data within the language.
#+SETUPFILE: ../../org-html-themes/setup/theme-readtheorg-local.setup

* LaTeX settings                                :noexport:

#+LaTeX_header: \usepackage{unicode-math}
#+LaTeX_header: \usepackage{unicode}

* Introduction
:PROPERTIES:
:CUSTOM_ID: Introduction
:END:

These notes were created for, and in some parts *during*,
the lecture on November 6th and the following tutorials.

* Motivation
:PROPERTIES:
:CUSTOM_ID: Motivation
:END:

:TODO:

* Getting Clojure
:PROPERTIES:
:CUSTOM_ID: Getting-Clojure
:END:

For a quick start with Clojure, you can use
[[https://repl.it/languages/clojure][repl.it]].

For instructions on installing Clojure,
see the Clojure [[https://clojure.org/guides/getting_started][getting started guide]].

For the purposes of testing in Docker,
we will use the build tool [[https://leiningen.org/][Leiningen]].

That said, we do not assume that a “project” is created
for the homeworks and assignments. As with Scala,
we will assume that your Clojure code is a /script/,
to be run in the REPL.

Specifically, we will run your code by starting a REPL with ~lein repl~,
and then “dumping” your code into that REPL.

If you want to check how your code runs
with ~lein repl~ on your own system,
you can run ~cat my-code-file.clj | lein repl~.
This is the command the Docker image will use.

* The syntax and (most of) the semantics of Clojure
:PROPERTIES:
:CUSTOM_ID: The-syntax-and-(most-of)-the-semantics-of-Clojure
:END:

The syntax of Lisps such as Clojure tend to be extremely minimal.
For today at least, we will work with a subset of the language
described by the following grammar, which is sufficient
for a fair amount of programming.
#+begin_src text
⟨expr⟩ ::= number
         | "nil"
         | ⟨list⟩
         | ⟨array⟩
         | symbol

⟨list⟩ ∷= "(" {⟨expr⟩} ")"

⟨array⟩ ∷= "[" {⟨expr⟩} "]"
#+end_src

For example, the following are all Clojure expressions.
- Integers.
  #+begin_src clojure
2
-1
  #+end_src
- Symbols
  #+begin_src clojure
:symbols
:a
:b
  #+end_src

- Lists (note the ~'~ or ~quote~ usage; we will explain it below in [[The ~quote~, ~'~]].)
  - Which are heterogeneous.
  #+begin_src clojure
;; Lists
()
'(1 2 3)
'(:a 2 3)
(quote (1 2 3))
'((1 2) (3 4))

(first '(1 2 3)) ;; => 1
                 ;; first is often called car in other Lisps.
                 ;; Standing for "Contents of Address part of Register",
                 ;; referring to the memory layout used in the original implementation of Lisp.
(rest '(1 2 3)) ;; => (2 3)
                ;; rest is often called cdr in other Lisps.
                ;; (Pronounced "could-er".)
                ;; Standing for "Contents of Decrement part of Register".
  #+end_src

  #+RESULTS:
  | ()            |
  | (1 2 3)       |
  | (:a 2 3)      |
  | (1 2 3)       |
  | ((1 2) (3 4)) |
  | 1             |
  | (2 3)         |

- Arrays
  - Also heterogeneous.
  #+begin_src clojure
;; Arrays
[1 2 3]
[:a 1 2]
[]
  #+end_src

- Sets and maps.
  - Which are also heterogeneous.
  #+begin_src clojure
#{1 2 3}

{:key 1, "my key" :a_value}
  #+end_src

  #+RESULTS:
  | #{1 3 2}                    |
  | {:key 1, "my key" :a_value} |

Clojure programs are written as lists,
with the head of the list being the /operator/ and
the tail of the list being the /operands/.
The (regular) semantics of Clojure expressions
can be described in just two lines;
to evaluate a list,
1. evaluate each element of the list, and then
2. apply the operands to the operator.
By default, Clojure does use call-by-value semantics.

For instance,
#+begin_src clojure
; (1 + 2) * max(3,4)
(* (+ 1 2)    ; (+ 1 2) evaluates to 3
   (max 4 3)  ; (max 4 3) evaluates to 4
   )          ; (* 3 4) evaluates to 12

(+ 1 2 3 4
   5 6 7 8)
(+ 1)
#+end_src

#+RESULTS:
| 12 |
| 36 |
|  1 |

* Special forms; the ~defn~, ~def~ and ~fn~ forms
:PROPERTIES:
:CUSTOM_ID: Special-forms;-the-~defn~,-~def~-and-~fn~-forms
:END:

When or if the evaluation rules of Clojure given above
prove too limiting, Clojure allows for “special forms”
(pieces of syntax handled differently by the compiler)
to implement constructs.

** ~defn~
:PROPERTIES:
:CUSTOM_ID: ~defn~
:END:

The first of these we will consider is the ~defn~ form,
which can be read “define function”.

For instance, here is code which defines two methods,
called ~square~ and ~sum_of_squares~,
and then calls ~sum_of_squares~ with arguments ~2~ and ~3~.
#+begin_src clojure :results value
(defn square [x] (* x x))

(defn sum-of-squares [x y]
  (+ (square x)
     (square y)))

(sum-of-squares 2 3)
#+end_src

#+RESULTS:
| #'user/square         |
| #'user/sum-of-squares |
| 13                    |

Functions can be defined as having different arities.
All the definitions do have to be packaged together as below.
#+begin_src clojure
; Define them by "brute force" 
(defn sum-of-squares
  ([x y]   (+ (square x) (square y)))
  ([x y z] (+ (square x) (square y) (square z))))

(sum-of-squares 2 3)
(sum-of-squares 2 3 4)
#+end_src

#+RESULTS:
| #'user/sum-of-squares |
|                    13 |
|                    29 |

They can even accept any number of arguments
by the use of an ampersand ~&~; an ~&~ followed by a name
indicates the function takes any number of additional arguments,
which are gathered into a list given that name.
#+begin_src clojure
;; sum-of-squares-variadic takes any number of arguments,
;; collected into the list xs.
;; (If we wanted to force there to be some arguments,
;; we could put those arguments before the &.)
(defn sum-of-squares-variadic [& xs]
 (if (empty? xs)
   ;; If xs is empty, the sum is 0.
   0
   ;; Otherwise, square the first element of xs, and add it
   ;; to the result of applying sum-of-squares-variadic
   ;; to the rest of the list.
   (+ (square (first xs))
      ;; Note that we need to use apply here as (rest xs) is a list,
      ;; not separate arguments.
      ;; (apply f (x1 x2 … xn)) is equivalent to (f x1 x2 … xn)
      ;; (It also works for arrays of arguments, not just lists.)
      (apply sum-of-squares-variadic (rest xs)))))

(sum-of-squares-variadic 1 2)
(sum-of-squares-variadic 1 2 3 4 5)
(sum-of-squares-variadic)
#+end_src

#+RESULTS:
| #'user/sum-of-squares-variadic |
|                              5 |
|                             55 |
|                              0 |

** ~defn~ is ~def~ plus ~fn~
:PROPERTIES:
:CUSTOM_ID: ~defn~-is-~def~-plus-~fn~
:END:

The ~defn~ form can be thought of
as the combination of the ~def~ and ~fn~ forms.
The ~def~ form defines named values.
#+begin_src clojure
(def my-favourite-number 16)
#+end_src

#+RESULTS:
: #'user/my-favourite-number

The ~fn~ form defines /anonymous/ functions.
We apply this one right away to see its result.
#+begin_src clojure
((fn [x] (+ x 1)) my-favourite-number)
#+end_src

#+RESULTS:
: 17

There is a shorthand for the ~fn~ syntax; ~(fn [args] body)~ can be
replaced by ~#(body)~, with a small change to ~body~.
There is no specification of argument names with the ~#()~ form,
so they need to be replaced in ~body~ with /positional argument names/.
A ~%~ is used if the function has a single parameter, ~%1~, ~%2~, etc.
if the function has multiple parameters, and ~%&~ if it is variadic.
So the above can be written
#+begin_src clojure
(#(+ % 1) my-favourite-number)
#+end_src
(Note; nesting of the ~#()~ form is not allowed, because the
positional parameter names would become ambiguous.)

Of course, given ~def~ and ~fn~, we don't need ~defn~;
we could just write
#+begin_src clojure
(def add-one (fn [x] (+ x 1)))
#+end_src

#+RESULTS:
: #'user/add-one

We've then given the anonymous function a name we can use later.
#+begin_src clojure
(add-one my-favourite-number)
#+end_src

#+RESULTS:
: 17

But ~defn~ is more convenient.

** Scope and the ~let~ form
:PROPERTIES:
:CUSTOM_ID: Scope-and-the-~let~-form
:END:

The ~def~ form creates a new /global/ binding.
This means even if not used at the “top-level”,
the binding can be seen anywhere.
#+begin_src clojure
(defn get-the-number []
  (def the-number 3)
  the-number)

(get-the-number)

the-number ;; Still in scope
#+end_src

The same applies for ~defn~.
#+begin_src clojure
(defn do-the-thing []
  (defn the-thing [] (+ 1 1))
  (the-thing))

; (the-thing) ;; After definition, the-thing is not yet defined.

(do-the-thing)

(the-thing) ;; But after execution, it's been bound.
#+end_src

In contrast, the ~let~ form creates a new /local/ binding.
#+begin_src clojure
(defn get-secret-symbol []
  (let [get-symbol (fn [] :secret)]
    (get-symbol)))
#+end_src

#+RESULTS:
: #'user/get-secret-symbol

* The ~quote~, ~'~
:PROPERTIES:
:CUSTOM_ID: The-~quote~,-~'~
:END:

Another special form is ~quote~, which is used
when you want to interpret a list as /data/ instead
of as a function invokation.
#+begin_src clojure
; call function +
(+ 1 2 3)

; create a list
(quote (+ 1 2 3))

; syntactic sugar; just prepend a ' to the front of the list
'(+ 1 2 3)
#+end_src

#+RESULTS:
| 6         |
| (+ 1 2 3) |
| (+ 1 2 3) |

* Conditional forms
:PROPERTIES:
:CUSTOM_ID: Conditional-forms
:END:

The form ~if~ acts as you would expect; it takes 3 arguments,
the first of which is checked for truth,
and if it is true, the second argument is evaluated.
Otherwise the third argument (if present) is evaluated.
#+begin_src clojure
(if (> 7 6) "Yes!" "No!")
(if (< 7 6) "Yes!" "No!")

; The else is optional.
(if (= 7 6) "Not okay!")
(if (not= 7 6) "Okay!")
#+end_src

#+RESULTS:
| "Yes!"  |
| "No!"   |
| "Okay!" |

All values in Clojure are “true” except for ~nil~ and ~false~.
#+begin_src clojure
(if 0 "1")
(if () "2")
(if nil "3")
(if false "4")
(if true "5")
#+end_src

#+RESULTS:
| "1" |
| "2" |
| "5" |

If you only want a “then” branch for your “if”,
then it's best to use the ~when~ form.
#+begin_src clojure
(when true "hello")
#+end_src

#+RESULTS:
: hello

:TODO: explain
#+begin_src clojure
(when true (println "Hello!") (println "Goodbye!"))
#+end_src

#+RESULTS:

For a more switch-statement like form, use ~cond~.
Since any value (that is not ~false~ or ~nil~) is truthy,
we can include an “else” branch by putting a value
as the condition. By convention, the symbol ~:else~ is used.
#+begin_src clojure
(cond (> 2 5) "2 is greater"
      (< 2 5) "5 is greater"
      :else "They're the same.")
#+end_src

#+RESULTS:
: 5 is greater

* ~do~, for sequential computation
:PROPERTIES:
:CUSTOM_ID: ~do~,-for-sequential-computation
:END:

If we put multiple expressions in sequence,
the “result” will usually be the value of the last expression.
For instance, in a function definition:
#+begin_src clojure
(defn add [x]
  (println "hello")
  (+ x x))

(add 5)
#+end_src

#+RESULTS:
| #'user/add |
|         10 |

In some cases, we cannot put a sequence of expressions
where we might want one. For instance, when using an ~if~,
the ~then~ branch has to be a single expression.
To get around this, there is a ~do~ form for sequencing.
#+begin_src clojure
(if true
  (do (println "First")
      (println "Second")))
#+end_src

#+RESULTS:

There are more complex forms for repeating the same expressions
several times;
- ~dotimes~ for evaluating a certain number of times,
  #+begin_src clojure
(dotimes [i 3] ;; The name is an iterator
  (println i))
  #+end_src
  and
  
- ~doseq~ for evaluating once for each element in a sequence.
  #+begin_src clojure
(doseq [i '(1 2 3)] (println i))
  #+end_src
  or iterating over multiple sequences
  #+begin_src clojure
(doseq [i '(1 2 3) j '(:a :b :c)] (println i j))
  #+end_src
  
* Side notes
:PROPERTIES:
:CUSTOM_ID: Side-notes
:END:

** Partial application
:PROPERTIES:
:CUSTOM_ID: Partial-application
:END:

Partial application would be implemented as
a function returning a function,
and invokation of such a function would look like
#+begin_src clojure
((f 3) 2)
#+end_src
